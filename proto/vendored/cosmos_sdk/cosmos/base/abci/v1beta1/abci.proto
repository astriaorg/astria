syntax = "proto3";
package cosmos.base.abci.v1beta1;

import "cosmos_sdk/tendermint/abci/types.proto";
import "google/protobuf/any.proto";

// This file contains types which are copied from
// https://github.com/celestiaorg/cosmos-sdk/blob/76bcf5af73b0a166552b64f9df0f87cc813aba76/proto/cosmos/base/abci/v1beta1/abci.proto
// (v1.18.3-sdk-v0.46.14 tag).

// TxResponse defines a structure containing relevant tx data and metadata. The
// tags are stringified and the log is JSON decoded.
message TxResponse {
  // The block height
  int64 height = 1;
  // The transaction hash.
  string txhash = 2;
  // Namespace for the Code
  string codespace = 3;
  // Response code.
  uint32 code = 4;
  // Result bytes, if any.
  string data = 5;
  // The output of the application's logger (raw string). May be
  // non-deterministic.
  string raw_log = 6;
  // The output of the application's logger (typed). May be non-deterministic.
  repeated ABCIMessageLog logs = 7;
  // Additional information. May be non-deterministic.
  string info = 8;
  // Amount of gas requested for transaction.
  int64 gas_wanted = 9;
  // Amount of gas consumed by transaction.
  int64 gas_used = 10;
  // The request transaction bytes.
  google.protobuf.Any tx = 11;
  // Time of the previous block. For heights > 1, it's the weighted median of
  // the timestamps of the valid votes in the block.LastCommit. For height == 1,
  // it's genesis time.
  string timestamp = 12;
  // Events defines all the events emitted by processing a transaction. Note,
  // these events include those emitted by processing all the messages and those
  // emitted from the ante. Whereas Logs contains the events, with
  // additional metadata, emitted only by processing the messages.
  //
  // Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
  repeated tendermint.abci.Event events = 13;
}

// ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
message ABCIMessageLog {
  uint32 msg_index = 1;
  string log = 2;

  // Events contains a slice of Event objects that were emitted during some
  // execution.
  repeated StringEvent events = 3;
}

// StringEvent defines en Event object wrapper where all the attributes
// contain key/value pairs that are strings instead of raw bytes.
message StringEvent {
  string type = 1;
  repeated Attribute attributes = 2;
}

// Attribute defines an attribute wrapper where the key and value are
// strings instead of raw bytes.
message Attribute {
  string key = 1;
  string value = 2;
}
