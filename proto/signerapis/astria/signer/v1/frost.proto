syntax = 'proto3';

package astria.signer.v1;

message GetVerifyingShareRequest {}

message GetVerifyingShareResponse {
    // the verifying share (partial public key) of the participant.
    // this is used for the coordinator to determine the identifier of the participant.
    // TODO: do we need to verify this (ie. have the server send back a signed message
    // with the verifying share)?
    bytes verifying_share = 1;
}

message CommitmentWithIdentifier {
    bytes commitment = 1;
    bytes participant_identifier = 2;
}

message RoundOneRequest {}

message RoundOneResponse {
    bytes commitment = 1;
    // required for the participant to internally track the nonce
    // corresponding to the commitment.
    uint32 request_identifier = 2;
}

message RoundTwoRequest {
    repeated CommitmentWithIdentifier commitments = 1;
    bytes message = 2;
    uint32 request_identifier = 3;
}

message RoundTwoResponse {
    bytes signature_share = 1;
}

service FrostParticipantService {
    rpc GetVerifyingShare(GetVerifyingShareRequest) returns (GetVerifyingShareResponse) {}
    rpc ExecuteRoundOne(RoundOneRequest) returns (RoundOneResponse) {}
    rpc ExecuteRoundTwo(RoundTwoRequest) returns (RoundTwoResponse) {}
}

