syntax = "proto3";

package astria.primitive.v1;

// A 128 bit unsigned integer encoded in protobuf.,
//
// Protobuf does not support integers larger than 64 bits,
// so this message encodes a u128 by splitting it into its
// upper 64 and lower 64 bits, each encoded as a uint64.
//
// A native u128 x can then be constructed by casting both
// integers to u128, left shifting hi by 64 positions and
// adding lo:
//
// x = (hi as u128) << 64 + (lo as u128)
message Uint128 {
  uint64 lo = 1;
  uint64 hi = 2;
}

// A proof for a tree of the given size containing the audit path from a leaf to the root.
message Proof {
  // A sequence of 32 byte hashes used to reconstruct a Merkle Tree Hash.
  bytes audit_path = 1;
  // The index of the leaf this proof applies to.
  uint64 leaf_index = 2;
  // The total size of the tree this proof was derived from.
  uint64 tree_size = 3;
}

/// Represents a denomination of some asset used within the sequencer.
/// The `id` is used to identify the asset and for balance accounting.
message Denom {
  bytes id = 1;
  string base_denom = 2;
}

// A `RollupId` is a unique identifier for a rollup chain.
// It must be 32 bytes long. It can be derived from a string
// using a sha256 hash.
message RollupId {
  bytes inner = 1;
}

// An Astria `Address`.
//
// Astria addresses are bech32m encoded strings, with the data part being the
// first 20 entries of a sha256-hashed ed25519 public key.
message Address {
  // A bech32m encoded string. The data are the first 20 bytes of a sha256-hashed ed25519
  // public key. Implementors must not accept both the `bytes` and `bech32m` being set.
  string bech32m = 2;

  // deprecated `bytes inner = 1;`
  reserved 1;
  reserved "inner";
}
