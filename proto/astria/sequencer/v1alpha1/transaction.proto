syntax = "proto3";

package astria.sequencer.v1alpha1;

import "astria/primitive/v1/types.proto";
import "penumbra/core/component/ibc/v1alpha1/ibc.proto";
import "tendermint/abci/types.proto";

// `SignedTransaction` is a transaction that has
// been signed by the given public key.
// It wraps an `UnsignedTransaction` with a
// signature and public key.
message SignedTransaction {
  bytes signature = 1;
  bytes public_key = 2;
  UnsignedTransaction transaction = 3;
}

// `UnsignedTransaction` is a transaction that does
// not have an attached signature.
// Note: `value` must be set, it cannot be `None`.
message UnsignedTransaction {
  uint32 nonce = 1;
  repeated Action actions = 2;
  // the asset used to pay the transaction fee
  bytes fee_asset_id = 3;
}

message Action {
  oneof value {
    TransferAction transfer_action = 1;
    SequenceAction sequence_action = 2;
    tendermint.abci.ValidatorUpdate validator_update_action = 3;
    SudoAddressChangeAction sudo_address_change_action = 4;
    MintAction mint_action = 5;
    penumbra.core.component.ibc.v1alpha1.IbcRelay ibc_action = 6;
    Ics20Withdrawal ics20_withdrawal = 7;
  }
}

// `TransferAction` represents a value transfer transaction.
//
// Note: all values must be set (ie. not `None`), otherwise it will
// be considered invalid by the sequencer.
message TransferAction {
  bytes to = 1;
  astria.primitive.v1.Uint128 amount = 2;
  // the asset to be transferred
  bytes asset_id = 3;
}

// `SequenceAction` represents a transaction destined for another
// chain, ordered by the sequencer.
//
// It contains the rollup ID of the destination chain, and the
// opaque transaction data.
message SequenceAction {
  bytes rollup_id = 1;
  bytes data = 2;
}

/// `SudoAddressChangeAction` represents a transaction that changes
/// the sudo address of the chain, which is the address authorized to
/// make validator update actions.
///
/// It contains the new sudo address.
message SudoAddressChangeAction {
  bytes new_address = 1;
}

// `MintAction` represents a minting transaction.
// It can only be executed by the chain's sudo address.
//
// It contains the address to mint to, and the amount to mint.
message MintAction {
  bytes to = 1;
  astria.primitive.v1.Uint128 amount = 2;
}

message Ics20Withdrawal {
  // first two fields are a transparent value consisting of an amount and a denom.
  astria.primitive.v1.Uint128 amount = 1;
  string denom = 2;
  // the address on the destination chain to send the transfer to.
  // this is not validated by Astria; it is up to the destination chain
  // to interpret it.
  string destination_chain_address = 3;
  // an Astria address to use to return funds from this withdrawal
  // in the case it fails.
  bytes return_address = 4;
  // the height (on Astria) at which this transfer expires.
  IbcHeight timeout_height = 5;
  // the unix timestamp (in nanoseconds) at which this transfer expires.
  uint64 timeout_time = 6;
  // the source channel used for the withdrawal.
  string source_channel = 7;
}

message IbcHeight {
  uint64 revision_number = 1;
  uint64 revision_height = 2;
}
