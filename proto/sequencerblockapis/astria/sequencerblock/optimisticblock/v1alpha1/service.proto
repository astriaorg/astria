syntax = "proto3";

<<<<<<<< HEAD:proto/sequencerblockapis/astria/sequencerblock/optimistic/v1alpha1/service.proto
package astria.sequencerblock.optimistic.v1alpha1;
========
package astria.sequencerblock.optimisticblock.v1alpha1;
>>>>>>>> d1edce9d (move optimistic block protos to v1):proto/sequencerblockapis/astria/sequencerblock/optimisticblock/v1alpha1/service.proto

import "astria/primitive/v1/types.proto";
import "astria/sequencerblock/v1/block.proto";

message GetBlockCommitmentStreamRequest {}

// Identifying metadata for blocks that have been successfully committed in the Sequencer.
message SequencerBlockCommit {
  // Height of the sequencer block that was committed.
  uint64 height = 1;
  // Hash of the sequencer block that was committed.
  bytes block_hash = 2;
}

message GetBlockCommitmentStreamResponse {
  SequencerBlockCommit commitment = 1;
}

message GetOptimisticBlockStreamRequest {
  // The rollup id for which the Sequencer block is being streamed.
  astria.primitive.v1.RollupId rollup_id = 1;
}

message GetOptimisticBlockStreamResponse {
  // The optimistic Sequencer block that is being streamed, filtered for the provided rollup id.
  astria.sequencerblock.v1.FilteredSequencerBlock block = 1;
}

// The Sequencer will serve this to the aucitoneer
service OptimisticBlockService {
  // The Sequencer will stream the optimistic Sequencer block (filtered for the provided
  // rollup id) to the Auctioneer.
  rpc GetOptimisticBlockStream(GetOptimisticBlockStreamRequest) returns (stream GetOptimisticBlockStreamResponse);
  // The Sequencer will stream the block commits to the Auctioneer.
  rpc GetBlockCommitmentStream(GetBlockCommitmentStreamRequest) returns (stream GetBlockCommitmentStreamResponse);
}
