syntax = "proto3";

package astria.sequencerblock.v1alpha1;

import "astria/primitive/v1/types.proto";
import "astria/sequencerblock/v1alpha1/block.proto";

// A collection of transactions belonging to a specific rollup that are submitted to celestia.
//
// The transactions contained in the item belong to a rollup identified
// by `rollup_id`, and were included in the sequencer block identified
// by `sequencer_block_hash`.
message CelestiaRollupBlob {
  // The hash of the sequencer block. Must be 32 bytes.
  bytes sequencer_block_hash = 1;
  // The 32 bytes identifying the rollup this blob belongs to. Matches
  // `astria.sequencer.v1.RollupTransactions.rollup_id`
  bytes rollup_id = 2;
  // A list of opaque bytes that are serialized rollup transactions.
  repeated bytes transactions = 3;
  // The proof that these rollup transactions are included in sequencer block.
  // `astria.sequencer.v1alpha.SequencerBlock.rollup_transactions_proof`.
  astria.primitive.v1.Proof proof = 4;
}

// The metadata of a sequencer block that is submitted to celestia.
//
// It is created by splitting a `astria.SequencerBlock` into a
// `CelestiaSequencerBlob` (which can be thought of as a header), and a sequence ofj
// `CelestiaRollupBlob`s.
//
// The original sequencer block (and in turn CometBFT block) can be identified by the
// block hash calculated from `header`.
message CelestiaSequencerBlob {
  // the 32-byte block hash of the sequencer block.
  bytes block_hash = 1;
  // the block header, which contains sequencer-specific commitments.
  astria.sequencerblock.v1alpha1.SequencerBlockHeader header = 2;
  // The rollup IDs for which `CelestiaRollupBlob`s were submitted to celestia.
  // Corresponds to the `astria.sequencer.v1.RollupTransactions.rollup_id` field
  // and is extracted from `astria.SequencerBlock.rollup_transactions`.
  repeated bytes rollup_ids = 3;
  // The proof that the rollup transactions are included in sequencer block.
  // Corresponds to `astria.sequencer.v1alpha.SequencerBlock.rollup_transactions_proof`.
  astria.primitive.v1.Proof rollup_transactions_proof = 4;
  // The proof that the rollup IDs are included in sequencer block.
  // Corresponds to `astria.sequencer.v1alpha.SequencerBlock.rollup_ids_proof`.
  astria.primitive.v1.Proof rollup_ids_proof = 5;
}
