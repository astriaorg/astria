syntax = "proto3";

package astria.sequencerblock.v1alpha1;

import "astria/primitive/v1/types.proto";
import "astria/sequencerblock/v1alpha1/block.proto";

message StreamBlockCommitmentsRequest {}

// Identifying metadata for blocks that have been successfully committed in the Sequencer.
message SequencerBlockCommit {
  // Height of the sequencer block that was committed.
  uint64 height = 1;
  // Hash of the sequencer block that was committed.
  bytes block_hash = 2;
}

message StreamOptimisticBlockRequest {
  // The rollup id for which the Sequencer block is being streamed.
  astria.primitive.v1.RollupId rollup_id = 1;
}

message StreamOptimisticBlockResponse {
  // The optimistic Sequencer block that is being streamed, filtered for the provided rollup id.
  astria.sequencerblock.v1alpha1.FilteredSequencerBlock block = 1;
}

// The Sequencer will serve this to the aucitoneer
service OptimisticBlockService {
  // The Sequencer will stream the optimistic Sequencer block (filtered for the provided
  // rollup id) to the Auctioneer.
  rpc StreamOptimisticBlock(StreamOptimisticBlockRequest) returns (stream StreamOptimisticBlockResponse);
  // The Sequencer will stream the block commits to the Auctioneer.
  rpc StreamBlockCommitments(StreamBlockCommitmentsRequest) returns (stream SequencerBlockCommit);
}
