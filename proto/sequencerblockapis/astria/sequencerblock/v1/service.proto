syntax = "proto3";

package astria.sequencerblock.v1;

import "astria/primitive/v1/types.proto";
import "astria/protocol/transaction/v1/transaction.proto";
import "astria/sequencerblock/v1/block.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

message GetSequencerBlockRequest {
  // The height of the block to retrieve.
  uint64 height = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetFilteredSequencerBlockRequest {
  // The height of the block to retrieve.
  uint64 height = 1 [(google.api.field_behavior) = REQUIRED];
  // The 32 bytes identifying a rollup. Usually the sha256 hash of a plain rollup name.
  repeated astria.primitive.v1.RollupId rollup_ids = 2 [(google.api.field_behavior) = REQUIRED];
}

message GetPendingNonceRequest {
  // The account to retrieve the pending nonce for.
  astria.primitive.v1.Address address = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetPendingNonceResponse {
  // The pending nonce for the given account.
  uint32 inner = 1;
}

message DumpMempoolRequest {}

message DumpMempoolResponse {
  repeated AccountTransactions pending = 1;
  repeated AccountTransactions parked = 2;
  repeated astria.primitive.v1.TransactionId comet_bft_removal_cache = 3;
  repeated astria.primitive.v1.TransactionId contained_txs = 4;
}

message AccountTransactions {
  // The account address.
  astria.primitive.v1.Address account = 1;
  // The transactions associated with the account.
  repeated astria.protocol.transaction.v1.Transaction transactions = 2;
}

service SequencerService {
  // Given a block height, returns the sequencer block at that height.
  rpc GetSequencerBlock(GetSequencerBlockRequest) returns (SequencerBlock) {
    option (google.api.http) = {get: "/v1/sequencer/{height}"};
  }

  // Given a block height and set of rollup ids, returns a SequencerBlock which
  // is filtered to contain only the transactions that are relevant to the given rollup.
  rpc GetFilteredSequencerBlock(GetFilteredSequencerBlockRequest) returns (FilteredSequencerBlock) {
    option (google.api.http) = {
      post: "/v1/sequencer/{height}:filtered"
      body: "*"
    };
  }

  // Returns the pending nonce for the given account.
  rpc GetPendingNonce(GetPendingNonceRequest) returns (GetPendingNonceResponse) {
    option (google.api.http) = {get: "/v1/sequencer/pendingnonce/{account}"};
  }
}

service MempoolInfoService {
  // Dumps the mempool.
  rpc DumpMempool(DumpMempoolRequest) returns (DumpMempoolResponse) {
    option (google.api.http) = {get: "/v1/admin/mempool"};
  }
}
