syntax = "proto3";

package astria.sequencerblock.v1;

import "astria/primitive/v1/proof.proto";
import "astria/primitive/v1/rollup_id.proto";

// A collection of transactions belonging to a specific rollup that are submitted to celestia.
//
// It is created by splitting an `astria.sequencerblock.v1.SequencerBlock` into a
// `astria.sequencerblock.v1.SequencerBlockMetadata`, and a sequence of
// `astria.sequencerblock.v1alpha.RollupData` (this object).
//
// The transactions contained in the item belong to a rollup identified
// by `rollup_id`, and were included in the sequencer block identified
// by `sequencer_block_hash`.

// A collection of transactions belonging to a specific Rollup that is submitted to a Data
// Availability provider like Celestia.
//
// It is created by splitting an `astria.sequencerblock.v1.SequencerBlock` into a
// `astria.sequencerblock.v1.SubmittedMetadata`, and a sequence of
// `astria.sequencerblock.v1alpha.SubmittedRollupData` (this object; one object per rollup that had
// data included in the sequencer block).
//
// The original sequencer block (and in turn CometBFT block) can be identified by the
// `sequencer_block_hash` field.
message SubmittedRollupData {
  // The hash of the sequencer block. Must be 32 bytes.
  bytes sequencer_block_hash = 1;
  // The 32 bytes identifying the rollup this blob belongs to. Matches
  // `astria.sequencer.v1.RollupTransactions.rollup_id`
  astria.primitive.v1.RollupId rollup_id = 2;
  // A list of opaque bytes that are serialized rollup transactions.
  repeated bytes transactions = 3;
  // The proof that these rollup transactions are included in sequencer block.
  // `astria.sequencer.v1alpha.SequencerBlock.rollup_transactions_proof`.
  astria.primitive.v1.Proof proof = 4;
}
