syntax = "proto3";
package astria_vendored.connect.oracle.v2;

import "google/api/annotations.proto";
import "astria_vendored/connect/oracle/v2/genesis.proto";
import "astria_vendored/connect/types/v2/currency_pair.proto";

option go_package = "github.com/skip-mev/connect/v2/x/oracle/types";

// Query is the query service for the x/oracle module.
service Query {
  // Get all the currency pairs the x/oracle module is tracking price-data for.
  rpc GetAllCurrencyPairs(GetAllCurrencyPairsRequest)
      returns (GetAllCurrencyPairsResponse) {
    option (google.api.http) = {
      get : "/connect/oracle/v2/get_all_tickers"
    };
  };

  // Given a CurrencyPair (or its identifier) return the latest QuotePrice for
  // that CurrencyPair.
  rpc GetPrice(GetPriceRequest) returns (GetPriceResponse) {
    option (google.api.http) = {
      get : "/connect/oracle/v2/get_price"
    };
  };

  rpc GetPrices(GetPricesRequest) returns (GetPricesResponse) {
    option (google.api.http) = {
      get : "/connect/oracle/v2/get_prices"
    };
  }

  // Get the mapping of currency pair ID -> currency pair. This is useful for
  // indexers that have access to the ID of a currency pair, but no way to get
  // the underlying currency pair from it.
  rpc GetCurrencyPairMapping(GetCurrencyPairMappingRequest)
      returns (GetCurrencyPairMappingResponse) {
    option (google.api.http) = {
      get : "/connect/oracle/v2/get_currency_pair_mapping"
      additional_bindings : []
    };
  }
}

message GetAllCurrencyPairsRequest {}

// GetAllCurrencyPairsResponse returns all CurrencyPairs that the module is
// currently tracking.
message GetAllCurrencyPairsResponse {
  repeated astria_vendored.connect.types.v2.CurrencyPair currency_pairs = 1
     ;
}

// GetPriceRequest takes an identifier for the
// CurrencyPair in the format base/quote.
message GetPriceRequest {
  // CurrencyPair represents the pair that the user wishes to query.
  string currency_pair = 1;
}

// GetPriceResponse is the response from the GetPrice grpc method exposed from
// the x/oracle query service.
message GetPriceResponse {
  // QuotePrice represents the quote-price for the CurrencyPair given in
  // GetPriceRequest (possibly nil if no update has been made)
  QuotePrice price = 1;
  // nonce represents the nonce for the CurrencyPair if it exists in state
  uint64 nonce = 2;
  // decimals represents the number of decimals that the quote-price is
  // represented in. It is used to scale the QuotePrice to its proper value.
  uint64 decimals = 3;
  // ID represents the identifier for the CurrencyPair.
  uint64 id = 4;
}

// GetPricesRequest takes an identifier for the CurrencyPair
// in the format base/quote.
message GetPricesRequest { repeated string currency_pair_ids = 1; }

// GetPricesResponse is the response from the GetPrices grpc method exposed from
// the x/oracle query service.
message GetPricesResponse {
  repeated GetPriceResponse prices = 1;
}

// GetCurrencyPairMappingRequest is the GetCurrencyPairMapping request type.
message GetCurrencyPairMappingRequest {}

// GetCurrencyPairMappingResponse is the GetCurrencyPairMapping response type.
message GetCurrencyPairMappingResponse {
  // currency_pair_mapping is a mapping of the id representing the currency pair
  // to the currency pair itself.
  map<uint64, astria_vendored.connect.types.v2.CurrencyPair> currency_pair_mapping = 1;
}
