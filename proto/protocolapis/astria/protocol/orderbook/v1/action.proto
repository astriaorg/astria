syntax = "proto3";

package astria.protocol.orderbook.v1;

import "astria/primitive/v1/types.proto";
import "astria/protocol/orderbook/v1/types.proto";

// Create a new order in the order book
message CreateOrder {
  // Market identifier (e.g., "BTC/USD")
  string market = 1;
  // Order side (buy or sell)
  OrderSide side = 2;
  // Order type (limit, market)
  OrderType type = 3;
  // Limit price (required for limit orders)
  astria.primitive.v1.Uint128 price = 4;
  // Amount to buy or sell
  astria.primitive.v1.Uint128 quantity = 5;
  // Time in force parameter
  OrderTimeInForce time_in_force = 6;
  // The asset used to pay the transaction fee
  string fee_asset = 7;
}

// Cancel an existing order
message CancelOrder {
  // ID of the order to cancel
  string order_id = 1;
  // The asset used to pay the transaction fee
  string fee_asset = 2;
}

// Create a new market for trading
message CreateMarket {
  // Market identifier (e.g., "BTC/USD")
  string market = 1;
  // Base asset of the market (e.g., "BTC")
  string base_asset = 2;
  // Quote asset of the market (e.g., "USD")
  string quote_asset = 3;
  // Minimum price increment
  astria.primitive.v1.Uint128 tick_size = 4;
  // Minimum quantity increment
  astria.primitive.v1.Uint128 lot_size = 5;
  // The asset used to pay the transaction fee
  string fee_asset = 6;
}

// Sudo action to update market parameters
message UpdateMarket {
  // Market identifier
  string market = 1;
  // New minimum price increment (if provided)
  astria.primitive.v1.Uint128 tick_size = 2;
  // New minimum quantity increment (if provided)
  astria.primitive.v1.Uint128 lot_size = 3;
  // Whether the market is paused
  bool paused = 4;
  // The asset used to pay the transaction fee
  string fee_asset = 5;
}