syntax = "proto3";

package astria.protocol.orderbook.v1;

import "astria/primitive/v1/types.proto";

enum OrderSide {
  ORDER_SIDE_UNSPECIFIED = 0;
  ORDER_SIDE_BUY = 1;
  ORDER_SIDE_SELL = 2;
}

enum OrderType {
  ORDER_TYPE_UNSPECIFIED = 0;
  ORDER_TYPE_LIMIT = 1;
  ORDER_TYPE_MARKET = 2;
}

enum OrderTimeInForce {
  ORDER_TIME_IN_FORCE_UNSPECIFIED = 0;
  ORDER_TIME_IN_FORCE_GTC = 1;  // Good Till Cancelled
  ORDER_TIME_IN_FORCE_IOC = 2;  // Immediate or Cancel
  ORDER_TIME_IN_FORCE_FOK = 3;  // Fill or Kill
}

message Order {
  // Unique identifier for the order
  string id = 1;
  // Address of the order creator
  astria.primitive.v1.Address owner = 2;
  // Market identifier (e.g., "BTC/USD")
  string market = 3;
  // Buy or sell
  OrderSide side = 4;
  // Order type (limit, market, etc.)
  OrderType type = 5;
  // Limit price (if applicable)
  astria.primitive.v1.Uint128 price = 6;
  // Original amount to be bought/sold
  astria.primitive.v1.Uint128 quantity = 7;
  // Remaining amount to be filled
  astria.primitive.v1.Uint128 remaining_quantity = 8;
  // Timestamp when the order was created
  uint64 created_at = 9;
  // Time in force parameter
  OrderTimeInForce time_in_force = 10;
  // The asset used to pay the transaction fee
  string fee_asset = 11;
}

message OrderbookEntry {
  // Price level
  astria.primitive.v1.Uint128 price = 1;
  // Total quantity at this price level
  astria.primitive.v1.Uint128 quantity = 2;
  // Number of orders at this price level
  uint32 order_count = 3;
}

message Orderbook {
  // Market identifier (e.g., "BTC/USD")
  string market = 1;
  // Sorted list of bid price levels (descending)
  repeated OrderbookEntry bids = 2;
  // Sorted list of ask price levels (ascending)
  repeated OrderbookEntry asks = 3;
}

message OrderMatch {
  // Unique identifier for the match
  string id = 1;
  // Market identifier
  string market = 2;
  // Price at which the match occurred
  astria.primitive.v1.Uint128 price = 3;
  // Amount that was matched
  astria.primitive.v1.Uint128 quantity = 4;
  // ID of the maker order
  string maker_order_id = 5;
  // ID of the taker order
  string taker_order_id = 6;
  // Side of the taker order
  OrderSide taker_side = 7;
  // Timestamp when the match occurred
  uint64 timestamp = 8;
}