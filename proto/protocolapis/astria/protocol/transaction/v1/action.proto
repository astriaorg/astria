syntax = "proto3";

package astria.protocol.transaction.v1;

import "astria/primitive/v1/types.proto";
import "astria/protocol/fees/v1/types.proto";
import "astria_vendored/penumbra/core/component/ibc/v1/ibc.proto";
import "astria_vendored/tendermint/abci/types.proto";

message Action {
  oneof value {
    // Core protocol actions are defined on 1-10
    Transfer transfer = 1;
    RollupDataSubmission rollup_data_submission = 2;

    // Bridge actions are defined on 11-20
    InitBridgeAccount init_bridge_account = 11;
    BridgeLock bridge_lock = 12;
    BridgeUnlock bridge_unlock = 13;
    BridgeSudoChange bridge_sudo_change = 14;

    // IBC user actions are defined on 21-30
    astria_vendored.penumbra.core.component.ibc.v1.IbcRelay ibc = 21;
    Ics20Withdrawal ics20_withdrawal = 22;
    RecoverClient recover_client = 23;

    // POA sudo actions are defined on 50-60
    SudoAddressChange sudo_address_change = 50;
    astria_vendored.tendermint.abci.ValidatorUpdate validator_update = 51;
    IbcRelayerChange ibc_relayer_change = 52;
    FeeAssetChange fee_asset_change = 53;
    FeeChange fee_change = 55;
    IbcSudoChange ibc_sudo_change = 56;
  }
}

// `TransferAction` represents a value transfer transaction.
//
// Note: all values must be set (ie. not `None`), otherwise it will
// be considered invalid by the sequencer.
message Transfer {
  astria.primitive.v1.Address to = 1;
  astria.primitive.v1.Uint128 amount = 2;
  // the asset to be transferred
  string asset = 3;
  // the asset used to pay the transaction fee
  string fee_asset = 4;
}

// `RollupDataSubmission` represents a transaction destined for another
// chain, ordered by the sequencer.
//
// It contains the rollup ID of the destination chain, and the
// opaque transaction data.
message RollupDataSubmission {
  astria.primitive.v1.RollupId rollup_id = 1;
  bytes data = 2;
  // the asset used to pay the transaction fee
  string fee_asset = 3;
}

/// `SudoAddressChange` represents a transaction that changes
/// the sudo address of the chain, which is the address authorized to
/// make validator update actions.
///
/// It contains the new sudo address.
message SudoAddressChange {
  astria.primitive.v1.Address new_address = 1;
}

message Ics20Withdrawal {
  // first two fields are a transparent value consisting of an amount and a denom.
  astria.primitive.v1.Uint128 amount = 1;
  string denom = 2;
  // the address on the destination chain to send the transfer to.
  // this is not validated by Astria; it is up to the destination chain
  // to interpret it.
  string destination_chain_address = 3;
  // an Astria address to use to return funds from this withdrawal
  // in the case it fails.
  astria.primitive.v1.Address return_address = 4;
  // the height (on the counterparty chain) at which this transfer expires.
  IbcHeight timeout_height = 5;
  // the unix timestamp (in nanoseconds) at which this transfer expires.
  uint64 timeout_time = 6;
  // the source channel used for the withdrawal.
  string source_channel = 7;
  // the asset used to pay the transaction fee
  string fee_asset = 8;
  // a memo to include with the transfer
  string memo = 9;
  // the address of the bridge account to transfer from, if this is a withdrawal
  // from a bridge account and the sender of the tx is the bridge's withdrawer,
  // which differs from the bridge account's address.
  //
  // if unset, and the transaction sender is not a bridge account, the withdrawal
  // is treated as a user (non-bridge) withdrawal.
  //
  // if unset, and the transaction sender is a bridge account, the withdrawal is
  // treated as a bridge withdrawal (ie. the bridge account's withdrawer address is checked).
  astria.primitive.v1.Address bridge_address = 10;

  // whether to use a bech32-compatible format of the `.return_address` when generating
  // fungible token packets (as opposed to Astria-native bech32m addresses). This is
  // necessary for chains like noble which enforce a strict bech32 format.
  bool use_compat_address = 11;
}

message IbcHeight {
  uint64 revision_number = 1;
  uint64 revision_height = 2;
}

// `IbcRelayerChange` represents a transaction that adds
// or removes an IBC relayer address.
// The bytes contained in each variant are the address to add or remove.
message IbcRelayerChange {
  oneof value {
    astria.primitive.v1.Address addition = 1;
    astria.primitive.v1.Address removal = 2;
  }
}

// `FeeAssetChange` represents a transaction that adds
// or removes an asset for fee payments.
message FeeAssetChange {
  oneof value {
    string addition = 1;
    string removal = 2;
  }
}

// `InitBridgeAccount` represents a transaction that initializes
// a bridge account for the given rollup on the chain.
//
// The sender of the transaction is used as the owner of the bridge account
// and is the only actor authorized to transfer out of this account via
// a `Transfer`.
message InitBridgeAccount {
  // the rollup ID to register with the bridge account (the tx sender)
  astria.primitive.v1.RollupId rollup_id = 1;
  // the asset ID accepted as an incoming transfer by the bridge account
  string asset = 2;
  // the asset used to pay the transaction fee
  string fee_asset = 3;
  // the address corresponding to the key which has sudo capabilities;
  // ie. can change the sudo and withdrawer addresses for this bridge account.
  // if this is empty, the sender of the transaction is used.
  astria.primitive.v1.Address sudo_address = 4;
  // the address corresponding to the key which can withdraw funds from this bridge account.
  // if this is empty, the sender of the transaction is used.
  astria.primitive.v1.Address withdrawer_address = 5;
}

// `BridgeLock` represents a transaction that transfers
// funds from a sequencer account to a bridge account.
//
// It's the same as a `Transfer` but with the added
// `destination_chain_address` field.
message BridgeLock {
  // the address of the bridge account to transfer to
  astria.primitive.v1.Address to = 1;
  // the amount to transfer
  astria.primitive.v1.Uint128 amount = 2;
  // the asset to be transferred
  string asset = 3;
  // the asset used to pay the transaction fee
  string fee_asset = 4;
  // the address on the destination chain which
  // will receive the bridged funds
  string destination_chain_address = 5;
}

// `BridgeUnlock` represents a transaction that transfers
// funds from a bridge account to a sequencer account.
//
// It's the same as a `Transfer` but without the `asset` field
// and with the `memo` field.
message BridgeUnlock {
  // the to withdraw funds to
  astria.primitive.v1.Address to = 1;
  // the amount to transfer
  astria.primitive.v1.Uint128 amount = 2;
  // the asset used to pay the transaction fee
  string fee_asset = 3;
  // The memo field can be used to provide unique identifying additional
  // information about the bridge unlock transaction.
  string memo = 4;
  // the address of the bridge account to transfer from
  astria.primitive.v1.Address bridge_address = 5;
  // The block number on the rollup that triggered the transaction underlying
  // this bridge unlock memo.
  uint64 rollup_block_number = 6;
  // An identifier of the original rollup event, such as a transaction hash which
  // triggered a bridge unlock and is underlying event that led to this bridge
  // unlock. This can be utilized for tracing from the bridge back to
  // distinct rollup events.
  //
  // This field is of type `string` so that it can be formatted in the preferred
  // format of the rollup when targeting plain text encoding.
  string rollup_withdrawal_event_id = 7;
}

message BridgeSudoChange {
  // the address of the bridge account to change the sudo or withdrawer addresses for
  astria.primitive.v1.Address bridge_address = 1;
  // the new sudo address; unchanged if unset
  astria.primitive.v1.Address new_sudo_address = 2;
  // the new withdrawer address; unchanged if unset
  astria.primitive.v1.Address new_withdrawer_address = 3;
  // the asset used to pay the transaction fee
  string fee_asset = 4;
}

message FeeChange {
  // the new fee components values
  oneof fee_components {
    astria.protocol.fees.v1.BridgeLockFeeComponents bridge_lock = 1;
    astria.protocol.fees.v1.BridgeSudoChangeFeeComponents bridge_sudo_change = 2;
    astria.protocol.fees.v1.BridgeUnlockFeeComponents bridge_unlock = 3;
    astria.protocol.fees.v1.FeeAssetChangeFeeComponents fee_asset_change = 4;
    astria.protocol.fees.v1.FeeChangeFeeComponents fee_change = 5;
    astria.protocol.fees.v1.IbcRelayFeeComponents ibc_relay = 7;
    astria.protocol.fees.v1.IbcRelayerChangeFeeComponents ibc_relayer_change = 6;
    astria.protocol.fees.v1.IbcSudoChangeFeeComponents ibc_sudo_change = 8;
    astria.protocol.fees.v1.Ics20WithdrawalFeeComponents ics20_withdrawal = 9;
    astria.protocol.fees.v1.InitBridgeAccountFeeComponents init_bridge_account = 10;
    astria.protocol.fees.v1.RollupDataSubmissionFeeComponents rollup_data_submission = 11;
    astria.protocol.fees.v1.SudoAddressChangeFeeComponents sudo_address_change = 12;
    astria.protocol.fees.v1.TransferFeeComponents transfer = 13;
    astria.protocol.fees.v1.ValidatorUpdateFeeComponents validator_update = 14;
    astria.protocol.fees.v1.RecoverClientFeeComponents recover_client = 15;
  }
}

message IbcSudoChange {
  astria.primitive.v1.Address new_address = 1;
}

message RecoverClient {
  // the client identifier for the client to be updated 
  string subject_client_id = 1;
  // the substitute client identifier for the client which will replace the subject
  // client
  string substitute_client_id = 2;
}
