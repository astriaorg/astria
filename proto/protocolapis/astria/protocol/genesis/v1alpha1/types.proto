syntax = "proto3";

package astria.protocol.genesis.v1alpha1;

import "astria/primitive/v1/types.proto";
import "astria/protocol/transactions/v1alpha1/types.proto";

message GenesisAppState {
  string chain_id = 1;
  AddressPrefixes address_prefixes = 2;
  repeated Account accounts = 3;
  astria.primitive.v1.Address authority_sudo_address = 4;
  astria.primitive.v1.Address ibc_sudo_address = 5;
  repeated astria.primitive.v1.Address ibc_relayer_addresses = 6;
  string native_asset_base_denomination = 7;
  IbcParameters ibc_parameters = 8;
  repeated string allowed_fee_assets = 9;
  GenesisFees genesis_fees = 10;
}

message Account {
  astria.primitive.v1.Address address = 1;
  astria.primitive.v1.Uint128 balance = 2;
}

message AddressPrefixes {
  // The base prefix used for most Astria Sequencer addresses.
  string base = 1;
  // The prefix used for sending ics20 transfers to IBC chains
  // that enforce a bech32 format of the packet sender.
  string ibc_compat = 2;
}

// IBC configuration data.
message IbcParameters {
  // Whether IBC (forming connections, processing IBC packets) is enabled.
  bool ibc_enabled = 1;
  // Whether inbound ICS-20 transfers are enabled
  bool inbound_ics20_transfers_enabled = 2;
  // Whether outbound ICS-20 transfers are enabled
  bool outbound_ics20_transfers_enabled = 3;
}

message GenesisFees {
  astria.protocol.transactions.v1alpha1.TransferFeeComponents transfer_fees = 1;
  astria.protocol.transactions.v1alpha1.SequenceFeeComponents sequence_fees = 2;
  astria.protocol.transactions.v1alpha1.Ics20WithdrawalFeeComponents ics20_withdrawal_fees = 3;
  astria.protocol.transactions.v1alpha1.InitBridgeAccountFeeComponents init_bridge_account_fees = 4;
  astria.protocol.transactions.v1alpha1.BridgeLockFeeComponents bridge_lock_fees = 5;
  astria.protocol.transactions.v1alpha1.BridgeUnlockFeeComponents bridge_unlock_fees = 6;
  astria.protocol.transactions.v1alpha1.BridgeSudoChangeFeeComponents bridge_sudo_change_fees = 7;
}
