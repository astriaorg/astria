syntax = "proto3";

package astria.auction.v1alpha1;

import "google/protobuf/any.proto";

message GetBidStreamRequest {}

// A bid is a bundle of transactions that was submitted to the auctioneer's rollup node.
// The rollup node will verify that the bundle is valid and pays the fee, and will stream
// it to the auctioneer for participation in the auction for a given block.
// The sequencer block hash and the rollup parent block hash are used by the auctioneer
// to identify the block for which the bundle is intended (i.e. which auction the bid is for).
message Bid {
  // The fee paid by the bundle submitter. The auctioneer's rollup node calculates this based
  // on the bundles submitted by users. For example, this can be the sum of the coinbase transfers
  // in the bundle's transactions.
  uint64 fee = 1;
  // The list of serialized rollup transactions from the bundle.
  repeated bytes transactions = 2;
  // The hash of the previous sequencer block, identifying the auction for which the bid is intended.
  // This is the hash of the sequencer block on top of which the bundle will be executed as ToB.
  bytes sequencer_parent_block_hash = 3;
  // The hash of previous rollup block, on top of which the bundle will be executed as ToB.
  bytes rollup_parent_block_hash = 4;
}

// The Allocation message is submitted by the Auctioneer to the rollup as a
// `RollupDataSubmission` on the sequencer.
// The rollup will verify the signature and public key against its configuration,
// then unbundle the body into rollup transactions and execute them first in the
// block.
message Allocation {
  // The Ed25519 signature of the Auctioneer, to be verified against config by the
  // rollup.
  bytes signature = 1;
  // The Ed25519 public key of the Auctioneer, to be verified against config by the
  // rollup.
  bytes public_key = 2;
  // The bid that was allocated the winning slot by the Auctioneer. This is a
  // google.protobuf.Any to avoid decoding and re-encoding after receiving an Allocation
  // over the wire and checking if signature and public key match the signed bid.
  // Implementors are expected to read and write an encoded Bid into this field.
  google.protobuf.Any bid = 3;
}

message GetBidStreamResponse {
  Bid bid = 1;
}

service AuctionService {
  // An auctioneer will initiate this long running stream to receive bids from the rollup node,
  // until either a timeout or the connection is closed by the client.
  rpc GetBidStream(GetBidStreamRequest) returns (stream GetBidStreamResponse);
}
