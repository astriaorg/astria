syntax = "proto3";

package astria.bundle.v1alpha1;

message GetBundleStreamRequest {}

// Information for the bundle submitter to know how to submit the bundle.
// The fee and base_sequencer_block_hash are not necessarily strictly necessary
// it allows for the case where the server doesn't always send the highest fee
// bundles after the previous but could just stream any confirmed bundles.
message Bundle {
  // The fee that can be expected to be received for submitting this bundle.
  // This allows the bundle producer to stream any confirmed bundles they would be ok
  // with submitting. Used to avoid race conditions in received bundle packets. Could
  // also be used by a bundle submitter to allow multiple entities to submit bundles.
  uint64 fee = 1;
  // The byte list of transactions to be included.
  repeated bytes transactions = 2;
  // The base_sequencer_block_hash is the hash from the base block this bundle
  // is based on. This is used to verify that the bundle is based on the correct
  // Sequencer block.
  bytes base_sequencer_block_hash = 3;
  // The hash of previous rollup block, on top of which the bundle will be executed as ToB.
  bytes prev_rollup_block_hash = 4;
}

message GetBundleStreamResponse {
  Bundle bundle = 1;
}

service BundleService {
  // A bundle submitter requests bundles given a new optimistic Sequencer block,
  // and receives a stream of potential bundles for submission, until either a timeout
  // or the connection is closed by the client.
  rpc GetBundleStream(GetBundleStreamRequest) returns (stream GetBundleStreamResponse);
}
