syntax = 'proto3';

package astria.execution.v2;

import "astria/primitive/v1/types.proto";

// ExecutionConfig contains the information needed to map sequencer block height
// to rollup block number for driving execution.
//
// This information is used to determine which sequencer & celestia data to
// use from the Astria & Celestia networks, as well as define shutdown/restart
// behavior of the Conductor.
message ExecutionConfig {
  // The rollup_id is the unique identifier for the rollup chain.
  astria.primitive.v1.RollupId rollup_id = 1;
  // The first rollup block number to be executed. This is mapped to `sequencer_first_block_height`.
  // The minimum first block number is 1, since 0 represents the genesis block.
  uint64 rollup_first_block_number = 2;
  // The final rollup block number to execute before either re-fetching sequencer
  // info (restarting) or shutting down (determined by `halt_at_rollup_stop_number`).
  // If 0, no stop block will be set.
  uint64 rollup_stop_block_number = 3;
  // The ID of the Astria Sequencer network to retrieve Sequencer blocks from.
  // Conductor implementations should verify that the Sequencer network they are
  // connected to have this chain ID (if fetching soft Sequencer blocks), and verify
  // that the Sequencer metadata blobs retrieved from Celestia contain this chain
  // ID (if extracting firm Sequencer blocks from Celestia blobs).
  string sequencer_chain_id = 4;
  // The first block height on the sequencer chain to use for rollup transactions.
  // This is mapped to `rollup_first_block_number`.
  uint64 sequencer_first_block_height = 5;
  // The ID of the Celestia network to retrieve blobs from.
  // Conductor implementations should verify that the Celestia network they are
  // connected to have this chain ID (if extracting firm Sequencer blocks from
  // Celestia blobs).
  string celestia_chain_id = 6;
  // The allowed variance in celestia for sequencer blocks to have been posted.
  uint64 celestia_block_variance = 7;
}
