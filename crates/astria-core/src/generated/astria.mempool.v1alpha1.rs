// This file is @generated by prost-build.
/// A request for the current Astria Sequencer mempool state.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMempoolRequest {}
impl ::prost::Name for GetMempoolRequest {
    const NAME: &'static str = "GetMempoolRequest";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.GetMempoolRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.GetMempoolRequest".into()
    }
}
/// A request to get the parked transaction queue of the Astria Sequencer's mempool.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetParkedTransactionsRequest {}
impl ::prost::Name for GetParkedTransactionsRequest {
    const NAME: &'static str = "GetParkedTransactionsRequest";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.GetParkedTransactionsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.GetParkedTransactionsRequest".into()
    }
}
/// A request to get the pending transaction queue of the Astria Sequencer's mempool.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPendingTransactionsRequest {}
impl ::prost::Name for GetPendingTransactionsRequest {
    const NAME: &'static str = "GetPendingTransactionsRequest";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.GetPendingTransactionsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.GetPendingTransactionsRequest".into()
    }
}
/// A request to get the removal cache of the Astria Sequencer's mempool.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRemovalCacheRequest {}
impl ::prost::Name for GetRemovalCacheRequest {
    const NAME: &'static str = "GetRemovalCacheRequest";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.GetRemovalCacheRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.GetRemovalCacheRequest".into()
    }
}
/// A request to get the status of a transaction in the Astria Sequencer's mempool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTransactionStatusRequest {
    /// The transaction hash.
    #[prost(bytes = "bytes", tag = "1")]
    pub transaction_hash: ::prost::bytes::Bytes,
}
impl ::prost::Name for GetTransactionStatusRequest {
    const NAME: &'static str = "GetTransactionStatusRequest";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.GetTransactionStatusRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.GetTransactionStatusRequest".into()
    }
}
/// `ParkedTransactions` is a resource which represents the parked queue of the
/// Astria Sequencer's mempool. The parked queue is a collection of transactions
/// which are currently invalid due to nonce or balance issues, but may become valid
/// in the future.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParkedTransactions {
    /// The hashes of the transactions in the parked queue.
    #[prost(bytes = "bytes", repeated, tag = "1")]
    pub inner: ::prost::alloc::vec::Vec<::prost::bytes::Bytes>,
}
impl ::prost::Name for ParkedTransactions {
    const NAME: &'static str = "ParkedTransactions";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.ParkedTransactions".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.ParkedTransactions".into()
    }
}
/// `PendingTransactions` is a resource which represents the pending queue of the
/// Astria Sequencer's mempool. The pending queue is a collection of transactions
/// which are currently either awaiting submission to the Sequencer or are submitted
/// and awaiting confirmation of inclusion.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PendingTransactions {
    /// The hashes of the transactions in the pending queue.
    #[prost(bytes = "bytes", repeated, tag = "1")]
    pub inner: ::prost::alloc::vec::Vec<::prost::bytes::Bytes>,
}
impl ::prost::Name for PendingTransactions {
    const NAME: &'static str = "PendingTransactions";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.PendingTransactions".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.PendingTransactions".into()
    }
}
/// `RemovalCache` is a resource which represents the removal cache of the Astria
/// Sequencer's mempool. The removal cache is a collection of transactions which
/// have been removed from the mempool either due to failing `CheckTx` or being
/// included in a block.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemovalCache {
    /// The transactions removed from the mempool and their removal reasons.
    #[prost(message, repeated, tag = "1")]
    pub inner: ::prost::alloc::vec::Vec<Removal>,
}
impl ::prost::Name for RemovalCache {
    const NAME: &'static str = "RemovalCache";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.RemovalCache".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.RemovalCache".into()
    }
}
/// Represents a transaction hash and its reason for removal from the mempool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Removal {
    /// The hash of the transaction which has been removed from the mempool.
    #[prost(bytes = "bytes", tag = "1")]
    pub tx_hash: ::prost::bytes::Bytes,
    /// The reason for the transaction's removal from the mempool.
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
}
impl ::prost::Name for Removal {
    const NAME: &'static str = "Removal";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.Removal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.Removal".into()
    }
}
/// `Mempool` is a resource which represents the mempool of the Astria Sequencer.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mempool {
    /// The pending queue of the mempool.
    #[prost(message, optional, tag = "1")]
    pub pending: ::core::option::Option<PendingTransactions>,
    /// The parked queue of the mempool.
    #[prost(message, optional, tag = "2")]
    pub parked: ::core::option::Option<ParkedTransactions>,
    /// The removal cache of the mempool.
    #[prost(message, optional, tag = "3")]
    pub removed: ::core::option::Option<RemovalCache>,
}
impl ::prost::Name for Mempool {
    const NAME: &'static str = "Mempool";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.Mempool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.Mempool".into()
    }
}
/// A request to submit a transaction directly to the Astria Sequencer's mempool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTransactionRequest {
    /// The transaction to be submitted.
    #[prost(bytes = "bytes", tag = "1")]
    pub transaction: ::prost::bytes::Bytes,
}
impl ::prost::Name for SubmitTransactionRequest {
    const NAME: &'static str = "SubmitTransactionRequest";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.SubmitTransactionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.SubmitTransactionRequest".into()
    }
}
/// `TransactionStatus` is a resource which represents the status of a transaction
/// in the Astria Sequencer's mempool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionStatus {
    /// The transaction hash.
    #[prost(bytes = "bytes", tag = "1")]
    pub transaction_hash: ::prost::bytes::Bytes,
    /// The status of the transaction. Can be one of:
    /// - `Pending`: The transaction is pending inclusion in a block.
    /// - `Parked`: The transaction is parked and will not be proposed until both:
    ///      - The transaction's nonce matches the sender's next nonce.
    ///      - The sender has sufficient balance to pay for the transaction.
    /// - `Removed`: The transaction has been removed from the mempool. Includes
    ///        reason for removal.
    /// - `Included`: The transaction has been included in a block. Includes hash
    ///        hash and number of the block in which the transaction was finalized.
    #[prost(oneof = "transaction_status::Status", tags = "2, 3, 4, 5")]
    pub status: ::core::option::Option<transaction_status::Status>,
}
/// Nested message and enum types in `TransactionStatus`.
pub mod transaction_status {
    /// The status of the transaction. Can be one of:
    /// - `Pending`: The transaction is pending inclusion in a block.
    /// - `Parked`: The transaction is parked and will not be proposed until both:
    ///      - The transaction's nonce matches the sender's next nonce.
    ///      - The sender has sufficient balance to pay for the transaction.
    /// - `Removed`: The transaction has been removed from the mempool. Includes
    ///        reason for removal.
    /// - `Included`: The transaction has been included in a block. Includes hash
    ///        hash and number of the block in which the transaction was finalized.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Status {
        #[prost(message, tag = "2")]
        Pending(super::Pending),
        #[prost(message, tag = "3")]
        Parked(super::Parked),
        #[prost(message, tag = "4")]
        Removed(super::Removed),
        #[prost(message, tag = "5")]
        Included(super::Included),
    }
}
impl ::prost::Name for TransactionStatus {
    const NAME: &'static str = "TransactionStatus";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.TransactionStatus".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.TransactionStatus".into()
    }
}
/// Status representing a pending transaction in the Astria Sequencer's mempool.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pending {}
impl ::prost::Name for Pending {
    const NAME: &'static str = "Pending";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.Pending".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.Pending".into()
    }
}
/// Status representing a parked transaction in the Astria Sequencer's mempool.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Parked {}
impl ::prost::Name for Parked {
    const NAME: &'static str = "Parked";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.Parked".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.Parked".into()
    }
}
/// Status representing a removed transaction in the Astria Sequencer's mempool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Removed {
    /// The reason for the transaction's removal from the mempool.
    #[prost(string, tag = "1")]
    pub reason: ::prost::alloc::string::String,
}
impl ::prost::Name for Removed {
    const NAME: &'static str = "Removed";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.Removed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.Removed".into()
    }
}
/// Status representing a transaction which has been included in a block and is
/// no longer in the Astria Sequencer's mempool.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Included {
    /// The number of the block in which the transaction was included.
    #[prost(uint64, tag = "1")]
    pub block_number: u64,
}
impl ::prost::Name for Included {
    const NAME: &'static str = "Included";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.Included".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.Included".into()
    }
}
/// A response to a request to submit a transaction to the Astria Sequencer's mempool,
/// containing the status of the transaction in the mempool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTransactionResponse {
    /// The status of the transaction submitted to the mempool.
    #[prost(message, optional, tag = "1")]
    pub status: ::core::option::Option<TransactionStatus>,
}
impl ::prost::Name for SubmitTransactionResponse {
    const NAME: &'static str = "SubmitTransactionResponse";
    const PACKAGE: &'static str = "astria.mempool.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1alpha1.SubmitTransactionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1alpha1.SubmitTransactionResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod mempool_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// `MempoolService` is a gRPC service which provides access to the Astria Sequencer's
    /// mempool. It allows clients to get various information about the mempool, transaction
    /// status, and submit transactions directly to the mempool.
    #[derive(Debug, Clone)]
    pub struct MempoolServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MempoolServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MempoolServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MempoolServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MempoolServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// `GetMempool` returns the current state of the mempool, consisting of the
        /// parked and pending transaction queues, as well as removal cache.
        pub async fn get_mempool(
            &mut self,
            request: impl tonic::IntoRequest<super::GetMempoolRequest>,
        ) -> std::result::Result<tonic::Response<super::Mempool>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/astria.mempool.v1alpha1.MempoolService/GetMempool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "astria.mempool.v1alpha1.MempoolService",
                        "GetMempool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// `GetParkedTransactions` returns the parked transaction queue of the mempool.
        pub async fn get_parked_transactions(
            &mut self,
            request: impl tonic::IntoRequest<super::GetParkedTransactionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ParkedTransactions>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/astria.mempool.v1alpha1.MempoolService/GetParkedTransactions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "astria.mempool.v1alpha1.MempoolService",
                        "GetParkedTransactions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// `GetPendingTransactions` returns the pending transaction queue of the mempool.
        pub async fn get_pending_transactions(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPendingTransactionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PendingTransactions>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/astria.mempool.v1alpha1.MempoolService/GetPendingTransactions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "astria.mempool.v1alpha1.MempoolService",
                        "GetPendingTransactions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// `GetRemovalCache` returns the removal cache of the mempool.
        pub async fn get_removal_cache(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRemovalCacheRequest>,
        ) -> std::result::Result<tonic::Response<super::RemovalCache>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/astria.mempool.v1alpha1.MempoolService/GetRemovalCache",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "astria.mempool.v1alpha1.MempoolService",
                        "GetRemovalCache",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// `GetTransactionStatus` returns the status of a transaction in the mempool.
        pub async fn get_transaction_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTransactionStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionStatus>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/astria.mempool.v1alpha1.MempoolService/GetTransactionStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "astria.mempool.v1alpha1.MempoolService",
                        "GetTransactionStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// `SubmitTransaction` submits a transaction to the mempool and returns the
        /// status of the transaction in the mempool.
        pub async fn submit_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::SubmitTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitTransactionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/astria.mempool.v1alpha1.MempoolService/SubmitTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "astria.mempool.v1alpha1.MempoolService",
                        "SubmitTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod mempool_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MempoolServiceServer.
    #[async_trait]
    pub trait MempoolService: std::marker::Send + std::marker::Sync + 'static {
        /// `GetMempool` returns the current state of the mempool, consisting of the
        /// parked and pending transaction queues, as well as removal cache.
        async fn get_mempool(
            self: std::sync::Arc<Self>,
            request: tonic::Request<super::GetMempoolRequest>,
        ) -> std::result::Result<tonic::Response<super::Mempool>, tonic::Status>;
        /// `GetParkedTransactions` returns the parked transaction queue of the mempool.
        async fn get_parked_transactions(
            self: std::sync::Arc<Self>,
            request: tonic::Request<super::GetParkedTransactionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ParkedTransactions>,
            tonic::Status,
        >;
        /// `GetPendingTransactions` returns the pending transaction queue of the mempool.
        async fn get_pending_transactions(
            self: std::sync::Arc<Self>,
            request: tonic::Request<super::GetPendingTransactionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PendingTransactions>,
            tonic::Status,
        >;
        /// `GetRemovalCache` returns the removal cache of the mempool.
        async fn get_removal_cache(
            self: std::sync::Arc<Self>,
            request: tonic::Request<super::GetRemovalCacheRequest>,
        ) -> std::result::Result<tonic::Response<super::RemovalCache>, tonic::Status>;
        /// `GetTransactionStatus` returns the status of a transaction in the mempool.
        async fn get_transaction_status(
            self: std::sync::Arc<Self>,
            request: tonic::Request<super::GetTransactionStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionStatus>,
            tonic::Status,
        >;
        /// `SubmitTransaction` submits a transaction to the mempool and returns the
        /// status of the transaction in the mempool.
        async fn submit_transaction(
            self: std::sync::Arc<Self>,
            request: tonic::Request<super::SubmitTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitTransactionResponse>,
            tonic::Status,
        >;
    }
    /// `MempoolService` is a gRPC service which provides access to the Astria Sequencer's
    /// mempool. It allows clients to get various information about the mempool, transaction
    /// status, and submit transactions directly to the mempool.
    #[derive(Debug)]
    pub struct MempoolServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MempoolServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MempoolServiceServer<T>
    where
        T: MempoolService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/astria.mempool.v1alpha1.MempoolService/GetMempool" => {
                    #[allow(non_camel_case_types)]
                    struct GetMempoolSvc<T: MempoolService>(pub Arc<T>);
                    impl<
                        T: MempoolService,
                    > tonic::server::UnaryService<super::GetMempoolRequest>
                    for GetMempoolSvc<T> {
                        type Response = super::Mempool;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetMempoolRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MempoolService>::get_mempool(inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetMempoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/astria.mempool.v1alpha1.MempoolService/GetParkedTransactions" => {
                    #[allow(non_camel_case_types)]
                    struct GetParkedTransactionsSvc<T: MempoolService>(pub Arc<T>);
                    impl<
                        T: MempoolService,
                    > tonic::server::UnaryService<super::GetParkedTransactionsRequest>
                    for GetParkedTransactionsSvc<T> {
                        type Response = super::ParkedTransactions;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetParkedTransactionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MempoolService>::get_parked_transactions(
                                        inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetParkedTransactionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/astria.mempool.v1alpha1.MempoolService/GetPendingTransactions" => {
                    #[allow(non_camel_case_types)]
                    struct GetPendingTransactionsSvc<T: MempoolService>(pub Arc<T>);
                    impl<
                        T: MempoolService,
                    > tonic::server::UnaryService<super::GetPendingTransactionsRequest>
                    for GetPendingTransactionsSvc<T> {
                        type Response = super::PendingTransactions;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPendingTransactionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MempoolService>::get_pending_transactions(
                                        inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPendingTransactionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/astria.mempool.v1alpha1.MempoolService/GetRemovalCache" => {
                    #[allow(non_camel_case_types)]
                    struct GetRemovalCacheSvc<T: MempoolService>(pub Arc<T>);
                    impl<
                        T: MempoolService,
                    > tonic::server::UnaryService<super::GetRemovalCacheRequest>
                    for GetRemovalCacheSvc<T> {
                        type Response = super::RemovalCache;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRemovalCacheRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MempoolService>::get_removal_cache(inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetRemovalCacheSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/astria.mempool.v1alpha1.MempoolService/GetTransactionStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetTransactionStatusSvc<T: MempoolService>(pub Arc<T>);
                    impl<
                        T: MempoolService,
                    > tonic::server::UnaryService<super::GetTransactionStatusRequest>
                    for GetTransactionStatusSvc<T> {
                        type Response = super::TransactionStatus;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTransactionStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MempoolService>::get_transaction_status(
                                        inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTransactionStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/astria.mempool.v1alpha1.MempoolService/SubmitTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitTransactionSvc<T: MempoolService>(pub Arc<T>);
                    impl<
                        T: MempoolService,
                    > tonic::server::UnaryService<super::SubmitTransactionRequest>
                    for SubmitTransactionSvc<T> {
                        type Response = super::SubmitTransactionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubmitTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MempoolService>::submit_transaction(inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubmitTransactionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MempoolServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "astria.mempool.v1alpha1.MempoolService";
    impl<T> tonic::server::NamedService for MempoolServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
