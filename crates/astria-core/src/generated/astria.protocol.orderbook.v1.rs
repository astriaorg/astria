// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrderTimeInForce {
    #[prost(enumeration = "OrderTimeInForceInner", tag = "1")]
    pub inner: i32,
}
impl ::prost::Name for OrderTimeInForce {
    const NAME: &'static str = "OrderTimeInForce";
    const PACKAGE: &'static str = "astria.protocol.orderbook.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.protocol.orderbook.v1.OrderTimeInForce".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.protocol.orderbook.v1.OrderTimeInForce".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrderType {
    #[prost(enumeration = "OrderTypeInner", tag = "1")]
    pub inner: i32,
}
impl ::prost::Name for OrderType {
    const NAME: &'static str = "OrderType";
    const PACKAGE: &'static str = "astria.protocol.orderbook.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.protocol.orderbook.v1.OrderType".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.protocol.orderbook.v1.OrderType".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrderSide {
    #[prost(enumeration = "OrderSideInner", tag = "1")]
    pub inner: i32,
}
impl ::prost::Name for OrderSide {
    const NAME: &'static str = "OrderSide";
    const PACKAGE: &'static str = "astria.protocol.orderbook.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.protocol.orderbook.v1.OrderSide".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.protocol.orderbook.v1.OrderSide".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Order {
    /// Unique identifier for the order
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Address of the order creator
    #[prost(message, optional, tag = "2")]
    pub owner: ::core::option::Option<super::super::super::primitive::v1::Address>,
    /// Market identifier (e.g., "BTC/USD")
    #[prost(string, tag = "3")]
    pub market: ::prost::alloc::string::String,
    /// Buy or sell
    #[prost(message, optional, tag = "4")]
    pub side: ::core::option::Option<OrderSide>,
    /// Order type (limit, market, etc.)
    #[prost(message, optional, tag = "5")]
    pub r#type: ::core::option::Option<OrderType>,
    /// Limit price (if applicable)
    #[prost(message, optional, tag = "6")]
    pub price: ::core::option::Option<super::super::super::primitive::v1::Uint128>,
    /// Original amount to be bought/sold
    #[prost(message, optional, tag = "7")]
    pub quantity: ::core::option::Option<super::super::super::primitive::v1::Uint128>,
    /// Remaining amount to be filled
    #[prost(message, optional, tag = "8")]
    pub remaining_quantity: ::core::option::Option<
        super::super::super::primitive::v1::Uint128,
    >,
    /// Timestamp when the order was created
    #[prost(uint64, tag = "9")]
    pub created_at: u64,
    /// Time in force parameter
    #[prost(message, optional, tag = "10")]
    pub time_in_force: ::core::option::Option<OrderTimeInForce>,
    /// The asset used to pay the transaction fee
    #[prost(string, tag = "11")]
    pub fee_asset: ::prost::alloc::string::String,
}
impl ::prost::Name for Order {
    const NAME: &'static str = "Order";
    const PACKAGE: &'static str = "astria.protocol.orderbook.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.protocol.orderbook.v1.Order".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.protocol.orderbook.v1.Order".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrderbookEntry {
    /// Price level
    #[prost(message, optional, tag = "1")]
    pub price: ::core::option::Option<super::super::super::primitive::v1::Uint128>,
    /// Total quantity at this price level
    #[prost(message, optional, tag = "2")]
    pub quantity: ::core::option::Option<super::super::super::primitive::v1::Uint128>,
    /// Number of orders at this price level
    #[prost(uint32, tag = "3")]
    pub order_count: u32,
}
impl ::prost::Name for OrderbookEntry {
    const NAME: &'static str = "OrderbookEntry";
    const PACKAGE: &'static str = "astria.protocol.orderbook.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.protocol.orderbook.v1.OrderbookEntry".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.protocol.orderbook.v1.OrderbookEntry".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Orderbook {
    /// Market identifier (e.g., "BTC/USD")
    #[prost(string, tag = "1")]
    pub market: ::prost::alloc::string::String,
    /// Sorted list of bid price levels (descending)
    #[prost(message, repeated, tag = "2")]
    pub bids: ::prost::alloc::vec::Vec<OrderbookEntry>,
    /// Sorted list of ask price levels (ascending)
    #[prost(message, repeated, tag = "3")]
    pub asks: ::prost::alloc::vec::Vec<OrderbookEntry>,
}
impl ::prost::Name for Orderbook {
    const NAME: &'static str = "Orderbook";
    const PACKAGE: &'static str = "astria.protocol.orderbook.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.protocol.orderbook.v1.Orderbook".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.protocol.orderbook.v1.Orderbook".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderMatch {
    /// Unique identifier for the match
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Market identifier
    #[prost(string, tag = "2")]
    pub market: ::prost::alloc::string::String,
    /// Price at which the match occurred
    #[prost(message, optional, tag = "3")]
    pub price: ::core::option::Option<super::super::super::primitive::v1::Uint128>,
    /// Amount that was matched
    #[prost(message, optional, tag = "4")]
    pub quantity: ::core::option::Option<super::super::super::primitive::v1::Uint128>,
    /// ID of the maker order
    #[prost(string, tag = "5")]
    pub maker_order_id: ::prost::alloc::string::String,
    /// ID of the taker order
    #[prost(string, tag = "6")]
    pub taker_order_id: ::prost::alloc::string::String,
    /// Side of the taker order
    #[prost(message, optional, tag = "7")]
    pub taker_side: ::core::option::Option<OrderSide>,
    /// Timestamp when the match occurred
    #[prost(uint64, tag = "8")]
    pub timestamp: u64,
}
impl ::prost::Name for OrderMatch {
    const NAME: &'static str = "OrderMatch";
    const PACKAGE: &'static str = "astria.protocol.orderbook.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.protocol.orderbook.v1.OrderMatch".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.protocol.orderbook.v1.OrderMatch".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderSideInner {
    Unspecified = 0,
    Buy = 1,
    Sell = 2,
}
impl OrderSideInner {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ORDER_SIDE_INNER_UNSPECIFIED",
            Self::Buy => "ORDER_SIDE_INNER_BUY",
            Self::Sell => "ORDER_SIDE_INNER_SELL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ORDER_SIDE_INNER_UNSPECIFIED" => Some(Self::Unspecified),
            "ORDER_SIDE_INNER_BUY" => Some(Self::Buy),
            "ORDER_SIDE_INNER_SELL" => Some(Self::Sell),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderTypeInner {
    Unspecified = 0,
    Limit = 1,
    Market = 2,
}
impl OrderTypeInner {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ORDER_TYPE_INNER_UNSPECIFIED",
            Self::Limit => "ORDER_TYPE_INNER_LIMIT",
            Self::Market => "ORDER_TYPE_INNER_MARKET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ORDER_TYPE_INNER_UNSPECIFIED" => Some(Self::Unspecified),
            "ORDER_TYPE_INNER_LIMIT" => Some(Self::Limit),
            "ORDER_TYPE_INNER_MARKET" => Some(Self::Market),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrderTimeInForceInner {
    Unspecified = 0,
    /// Good Till Cancelled
    Gtc = 1,
    /// Immediate or Cancel
    Ioc = 2,
    /// Fill or Kill
    Fok = 3,
}
impl OrderTimeInForceInner {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ORDER_TIME_IN_FORCE_INNER_UNSPECIFIED",
            Self::Gtc => "ORDER_TIME_IN_FORCE_INNER_GTC",
            Self::Ioc => "ORDER_TIME_IN_FORCE_INNER_IOC",
            Self::Fok => "ORDER_TIME_IN_FORCE_INNER_FOK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ORDER_TIME_IN_FORCE_INNER_UNSPECIFIED" => Some(Self::Unspecified),
            "ORDER_TIME_IN_FORCE_INNER_GTC" => Some(Self::Gtc),
            "ORDER_TIME_IN_FORCE_INNER_IOC" => Some(Self::Ioc),
            "ORDER_TIME_IN_FORCE_INNER_FOK" => Some(Self::Fok),
            _ => None,
        }
    }
}
