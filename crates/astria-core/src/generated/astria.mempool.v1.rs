// This file is @generated by prost-build.
/// A request to get the status of a transaction in the Astria Sequencer's mempool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTransactionStatusRequest {
    /// The transaction hash.
    #[prost(bytes = "bytes", tag = "1")]
    pub transaction_hash: ::prost::bytes::Bytes,
}
impl ::prost::Name for GetTransactionStatusRequest {
    const NAME: &'static str = "GetTransactionStatusRequest";
    const PACKAGE: &'static str = "astria.mempool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1.GetTransactionStatusRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1.GetTransactionStatusRequest".into()
    }
}
/// A request to submit a transaction directly to the Astria Sequencer's mempool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTransactionRequest {
    /// The transaction to be submitted.
    #[prost(message, optional, tag = "1")]
    pub transaction: ::core::option::Option<
        super::super::protocol::transaction::v1::Transaction,
    >,
}
impl ::prost::Name for SubmitTransactionRequest {
    const NAME: &'static str = "SubmitTransactionRequest";
    const PACKAGE: &'static str = "astria.mempool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1.SubmitTransactionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1.SubmitTransactionRequest".into()
    }
}
/// `TransactionStatus` is a resource which represents the status of a transaction
/// in the Astria Sequencer's mempool.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionStatus {
    /// The transaction hash.
    #[prost(bytes = "bytes", tag = "1")]
    pub transaction_hash: ::prost::bytes::Bytes,
    /// The status of the transaction. Can be one of:
    /// - `Pending`: The transaction is pending inclusion in a block.
    /// - `Parked`: The transaction is parked and will not be proposed until both:
    ///      - The transaction's nonce matches the sender's next nonce.
    ///      - The sender has sufficient balance to pay for the transaction.
    /// - `Removed`: The transaction has been removed from the mempool. Includes
    ///       reason for removal.
    /// - `Executed`: The transaction has been included in a sequencer block. Specifies
    ///       the block height in which the transaction was included.
    #[prost(oneof = "transaction_status::Status", tags = "2, 3, 4, 5")]
    pub status: ::core::option::Option<transaction_status::Status>,
}
/// Nested message and enum types in `TransactionStatus`.
pub mod transaction_status {
    /// Status representing a pending transaction in the Astria Sequencer's mempool.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Pending {}
    impl ::prost::Name for Pending {
        const NAME: &'static str = "Pending";
        const PACKAGE: &'static str = "astria.mempool.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "astria.mempool.v1.TransactionStatus.Pending".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/astria.mempool.v1.TransactionStatus.Pending".into()
        }
    }
    /// Status representing a parked transaction in the Astria Sequencer's mempool.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Parked {}
    impl ::prost::Name for Parked {
        const NAME: &'static str = "Parked";
        const PACKAGE: &'static str = "astria.mempool.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "astria.mempool.v1.TransactionStatus.Parked".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/astria.mempool.v1.TransactionStatus.Parked".into()
        }
    }
    /// Status representing a removed transaction in the Astria Sequencer's mempool.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Removed {
        /// The reason for the transaction's removal from the mempool.
        #[prost(string, tag = "1")]
        pub reason: ::prost::alloc::string::String,
    }
    impl ::prost::Name for Removed {
        const NAME: &'static str = "Removed";
        const PACKAGE: &'static str = "astria.mempool.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "astria.mempool.v1.TransactionStatus.Removed".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/astria.mempool.v1.TransactionStatus.Removed".into()
        }
    }
    /// Status representing a transaction which has been executed and is no longer
    /// in the Astria Sequencer's mempool.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Executed {
        /// The height of the block in which the transaction was included.
        #[prost(uint64, tag = "1")]
        pub height: u64,
        /// The transaction result.
        #[prost(message, optional, tag = "2")]
        pub result: ::core::option::Option<executed::ExecTxResult>,
    }
    /// Nested message and enum types in `Executed`.
    pub mod executed {
        /// EventAttribute is a single key-value pair, associated with an event.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct EventAttribute {
            #[prost(string, tag = "1")]
            pub key: ::prost::alloc::string::String,
            #[prost(string, tag = "2")]
            pub value: ::prost::alloc::string::String,
            #[prost(bool, tag = "3")]
            pub index: bool,
        }
        impl ::prost::Name for EventAttribute {
            const NAME: &'static str = "EventAttribute";
            const PACKAGE: &'static str = "astria.mempool.v1";
            fn full_name() -> ::prost::alloc::string::String {
                "astria.mempool.v1.TransactionStatus.Executed.EventAttribute".into()
            }
            fn type_url() -> ::prost::alloc::string::String {
                "/astria.mempool.v1.TransactionStatus.Executed.EventAttribute".into()
            }
        }
        /// A record of an event which occurred during transaction execution.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Event {
            #[prost(string, tag = "1")]
            pub kind: ::prost::alloc::string::String,
            #[prost(message, repeated, tag = "2")]
            pub attributes: ::prost::alloc::vec::Vec<EventAttribute>,
        }
        impl ::prost::Name for Event {
            const NAME: &'static str = "Event";
            const PACKAGE: &'static str = "astria.mempool.v1";
            fn full_name() -> ::prost::alloc::string::String {
                "astria.mempool.v1.TransactionStatus.Executed.Event".into()
            }
            fn type_url() -> ::prost::alloc::string::String {
                "/astria.mempool.v1.TransactionStatus.Executed.Event".into()
            }
        }
        /// The result of transaction execution.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ExecTxResult {
            #[prost(uint32, tag = "1")]
            pub code: u32,
            #[prost(bytes = "bytes", tag = "2")]
            pub data: ::prost::bytes::Bytes,
            #[prost(string, tag = "3")]
            pub log: ::prost::alloc::string::String,
            #[prost(string, tag = "4")]
            pub info: ::prost::alloc::string::String,
            #[prost(int64, tag = "5")]
            pub gas_wanted: i64,
            #[prost(int64, tag = "6")]
            pub gas_used: i64,
            #[prost(message, repeated, tag = "7")]
            pub events: ::prost::alloc::vec::Vec<Event>,
            #[prost(string, tag = "8")]
            pub codespace: ::prost::alloc::string::String,
        }
        impl ::prost::Name for ExecTxResult {
            const NAME: &'static str = "ExecTxResult";
            const PACKAGE: &'static str = "astria.mempool.v1";
            fn full_name() -> ::prost::alloc::string::String {
                "astria.mempool.v1.TransactionStatus.Executed.ExecTxResult".into()
            }
            fn type_url() -> ::prost::alloc::string::String {
                "/astria.mempool.v1.TransactionStatus.Executed.ExecTxResult".into()
            }
        }
    }
    impl ::prost::Name for Executed {
        const NAME: &'static str = "Executed";
        const PACKAGE: &'static str = "astria.mempool.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "astria.mempool.v1.TransactionStatus.Executed".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/astria.mempool.v1.TransactionStatus.Executed".into()
        }
    }
    /// The status of the transaction. Can be one of:
    /// - `Pending`: The transaction is pending inclusion in a block.
    /// - `Parked`: The transaction is parked and will not be proposed until both:
    ///      - The transaction's nonce matches the sender's next nonce.
    ///      - The sender has sufficient balance to pay for the transaction.
    /// - `Removed`: The transaction has been removed from the mempool. Includes
    ///       reason for removal.
    /// - `Executed`: The transaction has been included in a sequencer block. Specifies
    ///       the block height in which the transaction was included.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Status {
        #[prost(message, tag = "2")]
        Pending(Pending),
        #[prost(message, tag = "3")]
        Parked(Parked),
        #[prost(message, tag = "4")]
        Removed(Removed),
        #[prost(message, tag = "5")]
        Executed(Executed),
    }
}
impl ::prost::Name for TransactionStatus {
    const NAME: &'static str = "TransactionStatus";
    const PACKAGE: &'static str = "astria.mempool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1.TransactionStatus".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1.TransactionStatus".into()
    }
}
/// A response to a request to submit a transaction to the Astria Sequencer's mempool,
/// containing the outcome of the submission.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTransactionResponse {
    /// The status of the submitted transaction.
    #[prost(message, optional, tag = "1")]
    pub status: ::core::option::Option<TransactionStatus>,
    /// Whether or not the transaction was already in the mempool.
    #[prost(bool, tag = "2")]
    pub duplicate: bool,
}
impl ::prost::Name for SubmitTransactionResponse {
    const NAME: &'static str = "SubmitTransactionResponse";
    const PACKAGE: &'static str = "astria.mempool.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "astria.mempool.v1.SubmitTransactionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/astria.mempool.v1.SubmitTransactionResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod transaction_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// `TransactionService` is a gRPC service which provides access to the Astria Sequencer's
    /// app-side mempool. It allows clients to query a transaction's status and submit
    /// transactions directly to the mempool.
    ///
    /// Submission to the app-side mempool via `TransactionService` is notably different
    /// than submission directly to CometBFT, and users should consider the implications
    /// of this when deciding how to submit transactions. If the transaction is accepted
    /// into the mempool, it will not be gossiped to any other nodes, and hence will
    /// not be persisted until it is executed and included in a block. As such, if the
    /// Sequencer in question is stopped, any transactions submitted directly to the
    /// app-side mempool which have not been executed will be lost.
    #[derive(Debug, Clone)]
    pub struct TransactionServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TransactionServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TransactionServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TransactionServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TransactionServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// `GetTransactionStatus` returns the status of a transaction in the app-side
        /// mempool.
        pub async fn get_transaction_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTransactionStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionStatus>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/astria.mempool.v1.TransactionService/GetTransactionStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "astria.mempool.v1.TransactionService",
                        "GetTransactionStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// `SubmitTransaction` submits a transaction to the mempool and returns the
        /// status of the transaction in the mempool.
        pub async fn submit_transaction(
            &mut self,
            request: impl tonic::IntoRequest<super::SubmitTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitTransactionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/astria.mempool.v1.TransactionService/SubmitTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "astria.mempool.v1.TransactionService",
                        "SubmitTransaction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod transaction_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TransactionServiceServer.
    #[async_trait]
    pub trait TransactionService: std::marker::Send + std::marker::Sync + 'static {
        /// `GetTransactionStatus` returns the status of a transaction in the app-side
        /// mempool.
        async fn get_transaction_status(
            self: std::sync::Arc<Self>,
            request: tonic::Request<super::GetTransactionStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionStatus>,
            tonic::Status,
        >;
        /// `SubmitTransaction` submits a transaction to the mempool and returns the
        /// status of the transaction in the mempool.
        async fn submit_transaction(
            self: std::sync::Arc<Self>,
            request: tonic::Request<super::SubmitTransactionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitTransactionResponse>,
            tonic::Status,
        >;
    }
    /// `TransactionService` is a gRPC service which provides access to the Astria Sequencer's
    /// app-side mempool. It allows clients to query a transaction's status and submit
    /// transactions directly to the mempool.
    ///
    /// Submission to the app-side mempool via `TransactionService` is notably different
    /// than submission directly to CometBFT, and users should consider the implications
    /// of this when deciding how to submit transactions. If the transaction is accepted
    /// into the mempool, it will not be gossiped to any other nodes, and hence will
    /// not be persisted until it is executed and included in a block. As such, if the
    /// Sequencer in question is stopped, any transactions submitted directly to the
    /// app-side mempool which have not been executed will be lost.
    #[derive(Debug)]
    pub struct TransactionServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TransactionServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TransactionServiceServer<T>
    where
        T: TransactionService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/astria.mempool.v1.TransactionService/GetTransactionStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetTransactionStatusSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::GetTransactionStatusRequest>
                    for GetTransactionStatusSvc<T> {
                        type Response = super::TransactionStatus;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTransactionStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::get_transaction_status(
                                        inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTransactionStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/astria.mempool.v1.TransactionService/SubmitTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitTransactionSvc<T: TransactionService>(pub Arc<T>);
                    impl<
                        T: TransactionService,
                    > tonic::server::UnaryService<super::SubmitTransactionRequest>
                    for SubmitTransactionSvc<T> {
                        type Response = super::SubmitTransactionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubmitTransactionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TransactionService>::submit_transaction(
                                        inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubmitTransactionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for TransactionServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "astria.mempool.v1.TransactionService";
    impl<T> tonic::server::NamedService for TransactionServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
