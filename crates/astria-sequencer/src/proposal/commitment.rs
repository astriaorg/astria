use std::{
    collections::HashMap,
    sync::Arc,
};

use astria_core::{
    primitive::v1::RollupId,
    protocol::{
        group_rollup_data_submissions_in_signed_transaction_transactions_by_rollup_id,
        transaction::v1::Transaction,
    },
    sequencerblock::v1::block::{
        DataItem,
        Deposit,
        RollupData,
    },
};
use astria_eyre::eyre::{
    Result,
    WrapErr,
};
use bytes::Bytes;

/// Wrapper for values returned by [`generate_rollup_datas_commitment`].
// NOTE: The generic arg can be removed when we no longer support running a network where the raw
//       txs are not encoded `DataItem`s, i.e. after `Upgrade1`. This is not needed for syncing to
//       a network with such legacy blocks, since it's only used via prepare-/process-proposal.
pub(crate) struct GeneratedCommitments<const USES_DATA_ITEM_ENUM: bool> {
    pub(crate) rollup_datas_root: [u8; 32],
    pub(crate) rollup_ids_root: [u8; 32],
}

impl<const USES_DATA_ITEM_ENUM: bool> GeneratedCommitments<USES_DATA_ITEM_ENUM> {
    /// The total size of the commitments, encoded as `DataItem`s in bytes if `USES_DATA_ITEM_ENUM`
    /// is true, or not encoded if false.
    pub(crate) fn total_size() -> usize {
        if USES_DATA_ITEM_ENUM {
            DataItem::ENCODED_ROLLUP_TRANSACTIONS_ROOT_LENGTH
                + DataItem::ENCODED_ROLLUP_IDS_ROOT_LENGTH
        } else {
            64
        }
    }

    pub(crate) fn into_iter(self) -> Result<std::array::IntoIter<Bytes, 2>> {
        if USES_DATA_ITEM_ENUM {
            let rollup_datas_root = DataItem::RollupTransactionsRoot(self.rollup_datas_root)
                .encode()
                .wrap_err("failed to encode rollup transactions root")?;
            let rollup_ids_root = DataItem::RollupIdsRoot(self.rollup_ids_root)
                .encode()
                .wrap_err("failed to encode rollup ids root")?;
            Ok([rollup_datas_root, rollup_ids_root].into_iter())
        } else {
            Ok([
                self.rollup_datas_root.to_vec().into(),
                self.rollup_ids_root.to_vec().into(),
            ]
            .into_iter())
        }
    }
}

/// Called when we receive a `PrepareProposal` or `ProcessProposal` consensus message.
///
/// In the case of `PrepareProposal`, we use this function to generate the `rollup_datas_commitment`
/// to be placed at the start of the block.
///
/// In the case of `ProcessProposal`, we use this function to generate and verify the
/// `rollup_datas_commitment` expected at the start of the block.
///
/// This function sorts the block's `sequence::Action`s contained within the transactions
/// using their `rollup_id`. It also appends the `Deposit`s generated by the block execution
/// to each rollup's sequenced data.
/// It then returns the merkle root of the tree where each leaf is
/// a commitment of the rollup data (`sequence::Action`s and `Deposit`s) with the same `rollup_id`.
/// The leaves are ordered by `rollup_id` in ascending order.
///
/// The leaf, which contains a commitment to every action with the same `rollup_id`, is currently
/// implemented as ( `rollup_id` || root of merkle tree of the `sequence::Action`s ).
/// This is somewhat arbitrary, but could be useful for proof of an action within the rollup datas
/// tree.
pub(crate) fn generate_rollup_datas_commitment<const USES_DATA_ITEM_ENUM: bool>(
    signed_txs: &[Arc<Transaction>],
    deposits: HashMap<RollupId, Vec<Deposit>>,
) -> GeneratedCommitments<USES_DATA_ITEM_ENUM> {
    use prost::Message as _;

    let mut rollup_ids_to_txs =
        group_rollup_data_submissions_in_signed_transaction_transactions_by_rollup_id(signed_txs);

    for (rollup_id, deposit) in deposits {
        rollup_ids_to_txs
            .entry(rollup_id)
            .or_default()
            .extend(deposit.into_iter().map(|deposit| {
                RollupData::Deposit(Box::new(deposit))
                    .into_raw()
                    .encode_to_vec()
                    .into()
            }));
    }

    rollup_ids_to_txs.sort_unstable_keys();
    let rollup_ids_root = merkle::Tree::from_leaves(rollup_ids_to_txs.keys()).root();

    // each leaf of the action tree is the root of a merkle tree of the `sequence::Action`s
    // with the same `rollup_id`, prepended with `rollup_id`.
    // the leaves are sorted in ascending order by `rollup_id`.
    let rollup_datas_root =
        astria_core::primitive::v1::derive_merkle_tree_from_rollup_txs(&rollup_ids_to_txs).root();

    GeneratedCommitments {
        rollup_datas_root,
        rollup_ids_root,
    }
}

#[cfg(test)]
mod tests {
    use astria_core::{
        crypto::SigningKey,
        protocol::transaction::v1::{
            action::{
                RollupDataSubmission,
                Transfer,
            },
            TransactionBody,
        },
    };
    use bytes::Bytes;
    use rand::rngs::OsRng;

    use super::*;
    use crate::benchmark_and_test_utils::{
        astria_address,
        nria,
    };

    #[test]
    fn generate_rollup_datas_commitment_should_ignore_transfers() {
        let rollup_data_submission = RollupDataSubmission {
            rollup_id: RollupId::from_unhashed_bytes(b"testchainid"),
            data: Bytes::from_static(b"hello world"),
            fee_asset: nria().into(),
        };
        let transfer_action = Transfer {
            to: astria_address(&[0u8; 20]),
            amount: 1,
            asset: nria().into(),
            fee_asset: nria().into(),
        };

        let signing_key = SigningKey::new(OsRng);

        let tx = TransactionBody::builder()
            .actions(vec![
                rollup_data_submission.clone().into(),
                transfer_action.into(),
            ])
            .chain_id("test-chain-1")
            .try_build()
            .unwrap();

        let signed_tx = Arc::new(tx.sign(&signing_key));
        let txs = vec![signed_tx];
        let GeneratedCommitments {
            rollup_datas_root: commitment_0,
            ..
        } = generate_rollup_datas_commitment::<false>(&txs, HashMap::new());

        let signing_key = SigningKey::new(OsRng);
        let tx = TransactionBody::builder()
            .actions(vec![rollup_data_submission.into()])
            .chain_id("test-chain-1")
            .try_build()
            .unwrap();

        let signed_tx = Arc::new(tx.sign(&signing_key));

        let txs = vec![signed_tx];
        let GeneratedCommitments {
            rollup_datas_root: commitment_1,
            ..
        } = generate_rollup_datas_commitment::<false>(&txs, HashMap::new());
        assert_eq!(commitment_0, commitment_1);
    }

    #[test]
    // TODO(https://github.com/astriaorg/astria/issues/312): ensure this test is stable
    // against changes in the serialization format (protobuf is not deterministic)
    fn generate_rollup_datas_commitment_snapshot() {
        // this tests that the commitment generated is what is expected via a test vector.
        // this test will only break in the case of a breaking change to the commitment scheme,
        // thus if this test needs to be updated, we should cut a new release.

        let rollup_data_submission = RollupDataSubmission {
            rollup_id: RollupId::from_unhashed_bytes(b"testchainid"),
            data: b"helloworld".to_vec().into(),
            fee_asset: nria().into(),
        };
        let transfer_action = Transfer {
            to: astria_address(&[0u8; 20]),
            amount: 1,
            asset: nria().into(),
            fee_asset: nria().into(),
        };

        let signing_key = SigningKey::new(OsRng);
        let tx = TransactionBody::builder()
            .actions(vec![
                rollup_data_submission.clone().into(),
                transfer_action.into(),
            ])
            .chain_id("test-chain-1")
            .try_build()
            .unwrap();

        let signed_tx = Arc::new(tx.sign(&signing_key));
        let txs = vec![signed_tx];
        let GeneratedCommitments {
            rollup_datas_root: actual,
            ..
        } = generate_rollup_datas_commitment::<false>(&txs, HashMap::new());

        let expected = [
            189_u8, 156, 127, 228, 51, 249, 64, 237, 150, 91, 219, 216, 1, 99, 135, 28, 235, 15,
            249, 129, 3, 59, 231, 75, 92, 72, 103, 106, 173, 167, 251, 238,
        ];
        assert_eq!(expected, actual);
    }
}
