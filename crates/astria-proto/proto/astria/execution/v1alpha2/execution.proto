syntax = 'proto3';

package astria.execution.v1alpha2;

import "google/protobuf/timestamp.proto";

// The set of information which deterministic driver of block production
// must know about a given rollup Block
message Block {
  // The block number
  uint32 number = 1;
  // The hash of the block
  bytes hash = 2;
  // The hash from the parent block
  bytes parent_block_hash = 3;
  // Timestamp on the block, standardized to google protobuf standard.
  google.protobuf.Timestamp timestamp = 4;
}

// Fields which are indexed for finding blocks on a blockchain.
message BlockIdentifier {
  oneof identifier {
    uint32 block_number = 1;
    bytes block_hash = 2;
  }
}

// Used in GetBlock to find a single block.
message GetBlockRequest {
  BlockIdentifier identifier = 1;
}

// Used in BatchGetBlocks, will find all or none based on the list of
// identifiers.
message BatchGetBlocksRequest {
  repeated BlockIdentifier identifiers = 1;
}
// The list of blocks in response to BatchGetBlocks.
message BatchGetBlocksResponse {
  repeated Block blocks = 1;
}


// ExecuteBlockRequest contains all the information needed to create a new rollup
// block.
//
// This information comes from previous rollup blocks, as well as from sequencer
// blocks.
message ExecuteBlockRequest {
  // The hash of previous block, which new block will be created on top of.
  bytes prev_block_hash = 1;
  // List of transactions to include in the new block.
  repeated bytes transactions = 2;
  // Timestamp to be used for new block.
  google.protobuf.Timestamp timestamp = 3;
}

// The CommitmentState holds the block at each stage of sequencer commitment
// level
//
// A Valid CommitmentState:
// - Block numbers are such that soft >= firm.
// - No blocks ever decrease in block number.
// - The chain defined by soft is the head of the canonical chain the firm block
//   must belong to.
message CommitmentState {
  // Soft commitment is the rollup block matching latest sequencer block.
  Block soft = 1;
  // Firm commitment is achieved when data has been seen in DA.
  Block firm = 2;
}

// There is only one CommitmentState object, so the request is empty.
message GetCommitmentStateRequest{}

// The CommitmentState to set, must include complete state.
message UpdateCommitmentStateRequest {
  CommitmentState commitment_state = 1;
}

// ExecutionService is used to drive deterministic production of blocks.
// 
// The service can be implemented by any blockchain which wants to utilize the
// Astria Shared Sequencer, and will have block production driven via the Astria
// "Conductor".
service ExecutionService {
  // GetBlock will return a block given an identifier.
  rpc GetBlock(GetBlockRequest) returns (Block);

  // BatchGetBlocks will return an array of Blocks given an array of block
  // identifiers.
  rpc BatchGetBlocks(BatchGetBlocksRequest) returns (BatchGetBlocksResponse);

  // ExecuteBlock is called to deterministically derive a rollup block from
  // filtered sequencer block information.
  rpc ExecuteBlock(ExecuteBlockRequest) returns (Block);

  // GetCommitmentState fetches the current CommitmentState of the chain.
  rpc GetCommitmentState(GetCommitmentStateRequest) returns (CommitmentState);

  // UpdateCommitmentState replaces the whole CommitmentState with a new
  // CommitmentState.
  rpc UpdateCommitmentState(UpdateCommitmentStateRequest) returns (CommitmentState);
}
