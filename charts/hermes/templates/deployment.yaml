apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hermes.fullname" . }}
  labels:
    app: {{ include "hermes.fullname" . }}
  namespace: {{ include "hermes.namespace" . }}
spec:
  replicas: {{ .Values.global.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "hermes.fullname" . }}
  template:
    metadata:
      name: {{ include "hermes.fullname" . }}
      labels:
        app: {{ include "hermes.fullname" . }}
    spec:
      {{- if .Values.createChannels }}
      initContainers:
      {{- range $index, $channel := .Values.createChannels }}
      {{- if $channel.enabled }}
        - name: create-channel-{{ $index }}
          image: {{ $.Values.image }}
          imagePullPolicy: {{ $.Values.imagePullPolicy }}
          command: [ "hermes",  "create", "channel" ]
          args:
            - --new-client-connection
            - --yes
            - --a-chain={{ $channel.chainA }}
            - --b-chain={{ $channel.chainB }}
            - --a-port={{ $channel.portA }}
            - --b-port={{ $channel.portB }}
          volumeMounts:
            - mountPath: /home/hermes/.hermes
              name: {{ include "hermes.fullname" $ }}-config-volume
        {{- range $chainId, $chain := $.Values.chains }}
            - mountPath: "/home/hermes/.hermes/keys/{{ $chainId }}/keyring-test"
              name: {{ include "hermes.fullname" $ }}-{{$chainId}}-key-volume
        {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      containers:
        - name: hermes
          image: {{ .Values.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command: ["hermes", "start"]
          volumeMounts:
            - mountPath: /home/hermes/.hermes
              name: {{ include "hermes.fullname" . }}-config-volume
          {{- range $chainId, $chain := .Values.chains }}
            - mountPath: "/home/hermes/.hermes/keys/{{ $chainId }}/keyring-test"
              name: {{ include "hermes.fullname" $ }}-{{$chainId}}-key-volume
          {{- end }}
          ports:
            - containerPort: {{ .Values.ports.rest }}
              name: rest
            - containerPort: {{ .Values.ports.telemetry }}
              name: telemetry
            - containerPort: {{ .Values.ports.tracingServer }}
              name: tracing
          # TODO - implement a readiness probe so we can wait on hermes startup correctly
{{/*          readinessProbe:*/}}
{{/*            httpGet:*/}}
{{/*              path: /channels*/}}
{{/*              port: {{ .Values.ports.rest }}*/}}
      volumes:
        - name: {{ include "hermes.fullname" . }}-config-volume
          configMap:
            name: {{ include "hermes.fullname" . }}-config
        {{- range $chainId, $chain := .Values.chains }}
        - name: {{ include "hermes.fullname" $ }}-{{$chainId}}-key-volume
          {{- if $.Values.secretProvider.enabled }}
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "hermes.fullname" $ }}-{{ $chainId }}-secrets-store
          {{- else }}
          configMap:
            name: {{ include "hermes.fullname" $ }}-{{$chainId}}-key
          {{- end }}
        {{- end}}
