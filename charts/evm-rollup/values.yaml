global:
  namespaceOverride: ""
  replicaCount: 1
  # Whether to use tty readable logging for astria services, when false use json.
  # Best to be false in production environments, true for clean logs on local dev.
  useTTY: false
  dev: false
  # The name of the rollup chain, used to generate the Rollup ID.
  # If this matches one of the predefined rollups and dev is not set to true
  # a predefined genesis and images will be used. When set to custom,
  # all values below are used.
  #
  # Allowed values: custom, flame, flame-dawn-1, flame-dusk-11
  rollupName: custom

# Note that the tags below are only used when either `global.rollupName` is set
# to `custom` or `global.dev` is set to `true`.
#
# If you are using a predefined rollup, the image tags are predefined to latest
# release for that network defined in the helpers file.
images:
  geth:
    repo: ghcr.io/astriaorg/astria-geth
    pullPolicy: IfNotPresent
    tag: latest
  conductor:
    repo: ghcr.io/astriaorg/conductor
    pullPolicy: IfNotPresent
    tag: latest
  snapshot:
    repo: rclone/rclone
    pullPolicy: IfNotPresent
    tag: 1.69.0

# Not utilized unless `global.rollupName` is set to `custom`
genesis:
  # The "forks" for upgrading the chain. Contains necessary information for starting
  # and, if desired, restarting the chain at a given height. The necessary fields
  # for the genesis fork are provided, and additional forks can be added as needed.
  forks:
    launch:
      # The rollup number to start executing blocks at, lowest possible is 1
      height: 1
      # Whether to halt the rollup chain at the given height
      halt: "false"
      # Checksum of the snapshot to use upon restart
      snapshotChecksum: ""
      # Will fill the extra data in each block, can be left empty
      # can also fill with something unique for your chain.
      extraDataOverride: ""
      # Configure the fee collector for the evm tx fees, activated at block heights.
      # If not configured, all tx fees will be burned.
      feeCollector: ""
        # 1: "0xaC21B97d35Bf75A7dAb16f35b111a50e78A72F30"
      # Configure EIP-1559 params, activated at block heights.
      eip1559Params: {}
        # 1:
        #   minBaseFee: 0
        #   elasticityMultiplier: 2
        #   baseFeeChangeDenominator: 8
      sequencer:
        # The chain id of the sequencer chain
        chainId: ""
        # The hrp for bech32m addresses, unlikely to be changed
        addressPrefix: "astria"
        # Block height to start syncing rollup from (inclusive), lowest possible is 2
        startHeight: ""
      celestia:
        # The chain id of the celestia chain
        chainId: ""
        # The first Celestia height to utilize when looking for rollup data
        startHeight: ""
        # The maximum number of blocks ahead of the lowest Celestia search height
        # to search for a firm commitment
        searchHeightMaxLookAhead: ""
      # Configure the sequencer bridge addresses and allowed assets if using
      # the astria canonical bridge. Recommend removing alloc values if so.
      bridgeAddresses: []
        # - address: "684ae50c49a434199199c9c698115391152d7b3f"
        #   assetDenom: "nria"
        #   senderAddress: "0x0000000000000000000000000000000000000000"
        #   assetPrecision: 9
        ## Native oracle configuration
      # address from which injected oracle transactions are called from;
      # must not have a known private key for mainnet
      astriaOracleCallerAddress: "0x0000000000000000000000000000000000000088"
      # address where the oracle contract is deployed at (at genesis)
      # must match the `alloc` genesis field
      astriaOracleContractAddress: "0x0000000000000000000000000000000000000089"

  ## These are general configuration values with some recommended defaults

  # Configure the gas Limit
  gasLimit: "50000000"
  # If set to true the genesis block will contain extra data
  overrideGenesisExtraData: true


  ## Standard Eth Genesis config values
  # An EVM chain number id, different from the astria rollup name
  chainId: ""
  # Configuration of Eth forks, setting to 0 will enable from height,
  # left as is these forks will not activate.
  cancunTime: ""
  pragueTime: ""
  verkleTime: ""
  # Can configure the genesis allocs for the chain
  alloc:
    # Deploying the deterministic deploy proxy contract in genesis
    # Forge and other tools use this for their CREATE2 usage, but
    # can only be included through the genesis block after EIP-155
    # https://github.com/Arachnid/deterministic-deployment-proxy
    - address: "0x4e59b44847b379578588920cA78FbF26c0B4956C"
      value:
        balance: "0"
        code: "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3"
    # Example of simple genesis account funding
    # - address: "0xaC21B97d35Bf75A7dAb16f35b111a50e78A72F30"
    #   value:
    #   # The balance must be a string due to size
    #   balance: "1000000000000000000000000000"

geth:
  # The level at which geth will log at,
  # Options are: 0(off), 1(error), 2(warn), 3(info), 4(debug), 5(trace)
  logLevel: 3
  # Override the log level of individual modules
  moduleLogLevels:
    - module: "execution/*"
      level: 4
  # Set to true to keep history of all blocks
  archiveNode: false
  # Set to true to clear the mempool on startup/restart
  purgeMempool: false
  snapshot:
    # Load from snapshot
    restore:
      enabled: false
      # rclone source to download the snapshot from (in the form of remote:path)
      source: ""
      # Optional sha256 checksum to verify the snapshot
      checksum: ""
    # Create snapshots on a schedule
    create:
      enabled: false
      # Cron format (default: daily at midnight)
      schedule: "@daily"
      # Number of snapshots to keep on disk
      retentionCount: 7
      storage:
        path: '{{ include "rollup.gethDataDir" . }}/snapshots'
        upload:
          enabled: false
          # rclone destination to upload the snapshot to (in the form of remote:path)
          destination: ""
  # Enable p2p services for geth. Will create an internal headless service for p2p communication
  p2p:
    enabled: false
    # Setting this will create an external passthrough Network Load Balancer for p2p communication
    # and enable the p2p service to be publicly accessible
    staticExternalIP: ""
  # Set the contents of a config.toml file to be used by geth.
  # This value can be templated.
  configToml: ""
  flags:
    datadir:
      value: '{{ include "rollup.gethDataDir" . }}'
    http: {}
    http.addr:
      value: 0.0.0.0
    http.port:
      value: "{{ .Values.ports.jsonRPC }}"
    http.corsdomain:
      value: "*"
    http.vhosts:
      value: "*"
    http.api:
      value: eth,net,web3,debug,txpool
    ws: {}
    ws.addr:
      value: 0.0.0.0
    ws.port:
      value: "{{ .Values.ports.wsRPC }}"
    ws.origins:
      value: "*"
    ws.api:
      value: eth,txpool
    grpc: {}
    grpc.addr:
      value: 0.0.0.0
    grpc.port:
      value: "{{ .Values.ports.executionGRPC }}"
    db.engine:
      value: pebble  # Can be set to 'pebble' or 'leveldb'
    maxpeers:
      value: "0"
    rpc.gascap:
      value: "{{ .Values.genesis.gasLimit }}"
    rpc.txfeecap:
      value: "0"
    gcmode:
      value: "{{- if .Values.geth.archiveNode -}} archive {{- else -}} full {{- end }}"
    state.scheme:
      value: "{{- if .Values.geth.archiveNode -}} hash {{- else -}} path {{- end }}"
    history.transactions:
      value: "{{- if .Values.geth.archiveNode -}} 0 {{- else -}} 2350000 {{- end }}"
    history.state:
      value: "{{- if .Values.geth.archiveNode -}} 0 {{- else -}} 540000 {{- end }}"
    metrics:
      condition: "{{ .Values.metrics.enabled }}"
    metrics.addr:
      value: 0.0.0.0
      condition: "{{ .Values.metrics.enabled }}"
    metrics.port:
      value: "{{ .Values.ports.metrics }}"
      condition: "{{ .Values.metrics.enabled }}"
    txpool.nolocals:
      value: "true"
    verbosity:
      value: "{{ .Values.geth.logLevel }}"
    log.vmodule:
      value: "{{ range $index, $module := .Values.geth.moduleLogLevels }}{{- if $index }},{{- end }}{{- $module.module }}={{- $module.level }}{{- end }}"
    log.debug:
      condition: "{{ gt (int .Values.geth.logLevel) 3 }}"

conductor:
  # This is a rust log configuration, see https://docs.rs/env_logger/latest/env_logger/#enabling-logging
  # for detailed information.
  # Generally you can set a level for each crate or a global level
  # eg "debug" will set all crates in binary to log at debug level
  #    "debug,astria_conductor=info,astria_sequencer_client=off" will set all crates to debug but the conductor to info
  logLevel: "astria_conductor=debug"
  # Determines what will drive block execution, options are:
  # - "SoftOnly" -> blocks are only pulled from the sequencer
  # - "FirmOnly" -> blocks are only pulled from DA
  # - "SoftAndFirm" -> blocks are pulled from both the sequencer and DA
  executionCommitLevel: 'SoftAndFirm'
  # The expected fastest block time possible from sequencer, determines polling
  # rate.
  sequencerBlockTimeMs: 2000
  # The expected fastest block time possible from DA, determines polling rate.
  celestiaBlockTimeMs: 6000
  # URL path for the sequencer
  sequencerRpc: ""
  # gRPC path for the sequencer
  sequencerGrpc: ""
  # The maximum number of requests to make to the sequencer per second
  sequencerRequestsPerSecond: 500
  # if executionLevel is NOT 'SoftOnly' must set the RPC
  celestiaRpc: ""
  # Token can be left empty if the RPC does not require auth
  celestiaToken: ""

rclone:
  config:
    # Content to be written to rclone.conf file
    # Can be used to configure remote storage providers like S3, GCS, etc
    # Example:
    # [snapshots]
    # type = s3
    # provider = AWS
    # region = us-east-2
    # access_key_id = key
    # secret_access_key = secret
    # no_check_bucket = true
    devContent:
      snapshots:
        type: s3
        provider: AWS
        region: us-east-2
        accessKeyId: ""
        secretAccessKey: ""
        noCheckBucket: true
    # The secret resource name for the rclone config
    secret:
      resourceName: "projects/$PROJECT_ID/secrets/rclone-config/versions/latest"

metrics:
  # set to enable prometheus metrics
  enabled: false

otel:
  enabled: false
  serviceNamePrefix: '{{ include "rollup.name" . }}'
  endpoint: ""
  tracesEndpoint: ""
  tracesCompression: "gzip"
  tracesTimeout: "10"
  otlpHeaders: ""
  traceHeaders: ""

serviceMonitor:
  # set to enable port svc and service monitor
  enabled: false
  port: 6060
  additionalLabels:
    release: kube-prometheus-stack
alerting:
  enabled: false
  interval: ""
  additionalLabels:
    release: kube-prometheus-stack
  annotations: {}
  # scrapeTimeout: 10s
  # path: /metrics
  prometheusRule:
    enabled: true
    additionalLabels:
      release: kube-prometheus-stack
    namespace: monitoring
    rules:
    - alert: Geth_Slow_Finalized
      expr: increase(chain_head_finalized{namespace="astria-dusk3-cluster"}[5m]) < 20  # Insert your query Expression
      for: 5m  # Rough number but should be enough to init warn
      labels:
        severity: critical
      annotations:
        summary: Slow Chain Head Finalized (instance {{ $labels.instance }})
        description: "Chain Head Finalized on {{ $labels.namespace }} is increasing at a rate slower then 20 blocks per 5 minute\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"

ingress:
  enabled: false
  labels: {}
  hostname: 127.0.0.1.nip.io
  className: nginx
  services:
    rpc:
      enabled: true
      hosts:
        - 'executor.{{ include "rollup.name" . }}.{{ .Values.ingress.hostname }}'
      path: /
      pathType: Prefix
      service:
        name: '{{ include "rollup.name" . }}-evm-service'
        port:
          name: json-rpc-svc
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      labels: {}
      tls: {}
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local
    ws:
      enabled: true
      hosts:
        - ws-executor.{{ include "rollup.name" . }}.{{ .Values.ingress.hostname }}
      path: /
      pathType: Prefix
      service:
        name: '{{ include "rollup.name" . }}-evm-service'
        port:
          name: ws-rpc-svc
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      labels: {}
      tls: {}
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

# Default persistent storage values
# NOTE - `rollupName` will be used with `persistentVolumeName` to generate names for kubernetes resources.
#  e.g. astria-executor-pv, astria-executor-pvc
resources:
  conductor:
    requests:
      cpu: 100m
      memory: 200Mi
    limits:
      cpu: 1000m
      memory: 2Gi
  geth:
    requests:
      cpu: 16000m
      memory: 32Gi

storage:
  enabled: false
  local: true
  entities:
    rollupSharedStorage:
      size: "5Gi"
      persistentVolumeName: "rollup-shared-storage"
      path: "/data/rollup-data"

# When deploying in a production environment should use a secret provider
# This is configured for use with GCP, need to set own resource names
# and keys
secretProvider:
  enabled: false
  provider: gcp
  parametersTemplate: |-
    secrets: |
      - resourceName: {{ .key.resourceName }}
        fileName: "{{ .key.filename }}"

# Default service ports
ports:
  jsonRPC: 8545
  wsRPC: 8546
  executionGRPC: 50051
  metrics: 6060
  conductorMetrics: 9000
  p2p: 30303
