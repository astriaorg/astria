name: Test
env:
  CI: true
  RUSTFLAGS: "-D warnings -D unreachable-pub --cfg tokio_unstable"
on: 
  pull_request:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  run_checker:
    uses: ./.github/workflows/reusable-run-checker.yml
              
  compiles:
    runs-on: buildjet-4vcpu-ubuntu-2204
    needs: run_checker
    if: needs.run_checker.outputs.run_tests == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.73.0
      - uses: taiki-e/install-action@v2.15.2
        with:
          tool: cargo-hack@0.5.29
      - uses: Swatinem/rust-cache@v2.6.1
        with:
          cache-provider: "buildjet"
      - uses: arduino/setup-protoc@v2
        with:
          version: "24.4"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check that each crate compiles individually (circumventing workspace wide dependency resolution)
        run: cargo hack check --all --all-features

  lockfile:
    runs-on: ubuntu-22.04
    needs: run_checker
    if: needs.run_checker.outputs.run_tests == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.73.0
      - uses: Swatinem/rust-cache@v2.6.1
        with:
          cache-provider: "github"
      - name: Check that the lockfile is updated
        run: cargo fetch --locked
    
  rust:
    runs-on: buildjet-8vcpu-ubuntu-2204
    needs: run_checker
    if: needs.run_checker.outputs.run_tests == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      - name: Install solc-select for smart contract tests
        run: |
          pip3 install solc-select
          solc-select install 0.8.15
          solc-select use 0.8.15
      - uses: dtolnay/rust-toolchain@1.73.0
      - uses: Swatinem/rust-cache@v2.6.1
        with:
          cache-provider: "buildjet"
      - name: Install buf cli
        uses: bufbuild/buf-setup-action@v1
        with:
          version: "1.17.0"
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: arduino/setup-protoc@v2
        with:
          version: "24.4"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: "nightly-60ec00296f00754bc21ed68fd05ab6b54b50e024"
      - name: Build tests
        run: |
          cargo test --no-run --release --workspace \
          --all-features \
          --all-targets \
      - name: Run tests
        timeout-minutes: 20
        run: |
          cargo test --release --workspace \
          --all-features \
          --all-targets \
          -- --include-ignored

  doctest:
    runs-on: buildjet-8vcpu-ubuntu-2204
    needs: run_checker
    if: needs.run_checker.outputs.run_tests == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.73.0
      - uses: Swatinem/rust-cache@v2.6.1
        with:
          cache-provider: "buildjet"
      - uses: arduino/setup-protoc@v2
        with:
          version: "24.4"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: run doctests
        run: cargo test --doc --all-features

  clippy:
    runs-on: buildjet-8vcpu-ubuntu-2204
    needs: run_checker
    if: needs.run_checker.outputs.run_tests == 'true' && needs.run_checker.outputs.run_lint_rust == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.73.0
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2.6.1
        with:
          cache-provider: "buildjet"
      - uses: bufbuild/buf-setup-action@v1
        with:
          version: "1.17.0"
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: arduino/setup-protoc@v2
        with:
          version: "24.4"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: run pedantic clippy
        run: |
          cargo clippy --workspace \
          --all-targets \
          --all-features \
          -- --warn clippy::pedantic \
             --deny warnings

  test:
    if: ${{ always() && !cancelled() }}
    needs: [compiles, rust, doctest, clippy, lockfile]
    uses: ./.github/workflows/reusable-success.yml
    with:
      success: ${{ !contains(needs.*.result, 'failure') }}
